{"version":3,"sources":["../src/core.ts","../src/adapter/engine-express.ts","../src/templates.ts","../src/internal/middlewares.ts","../src/internal/multipart.ts","../src/internal/utils.ts","../src/json-builder.ts","../src/utils.ts"],"sourcesContent":["import type { OpenAPIV3 } from \"openapi-types\";\nimport z, { type ZodObject, type ZodType } from \"zod\";\n\ntype ZodParameterTypes =\n  | z.ZodString\n  | z.ZodNumber\n  | z.ZodNaN\n  | z.ZodBigInt\n  | z.ZodBoolean\n  | z.ZodDate\n  | z.ZodUndefined\n  | z.ZodEnum<[string, ...string[]]>\n  | z.ZodOptional<ZodParameterTypes>\n  | z.ZodNullable<ZodParameterTypes>;\n\ntype Extensions = Record<string, any>;\ntype Tag = OpenAPIV3.TagObject;\ntype EncodingItem = {\n  contentType?: string[],\n  headers?: ZodObject<Record<string, ZodParameterTypes>>,\n  style?: string,\n  explode?: string,\n  allowReserved?: string,\n};\n\nexport type LinzEndpoint = {\n  tags?: Tag[];\n  summary?: string;\n  description?: string;\n  operationId: string;\n  parameters?: {\n    query?: ZodObject<Record<string, ZodParameterTypes>>;\n    header?: ZodObject<Record<string, ZodParameterTypes>>;\n    path?: ZodObject<Record<string, ZodParameterTypes>>;\n    cookie?: ZodObject<Record<string, ZodParameterTypes>>;\n  };\n  // note: short-hand applicable\n  requestBody?: RequestBody;\n  responses: {\n    [status: number]: z.ZodFirstPartySchemaTypes | boolean | string;\n    default?: z.ZodFirstPartySchemaTypes;\n  };\n  deprecated?: boolean;\n  security?: Security<any>[];\n  handler: (\n    req: Readonly<HTTPRequest>,\n    extensions: Extensions\n  ) => Promise<HttpResponse<any> | HttpResponse<any>[\"payload\"][\"body\"]>;\n};\n\ntype MergeNonBooleanValues<T> = {\n  [K in keyof T]: T[K] extends ZodType ? z.infer<T[K]> : never\n}[keyof T];\ntype MergedResponse<T extends LinzEndpoint[\"responses\"]> = MergeNonBooleanValues<T> extends infer R ? R : never;\n\nexport const METHODS = [ \"get\", \"post\", \"put\", \"patch\", \"delete\" ] as const;\n\nexport type HttpMethod = (typeof METHODS)[number];\n\nexport type LinzEndpointGroup = {\n  [methodPath: `${(typeof METHODS)[number]}:${string}`]: LinzEndpoint;\n};\n\nexport type HTTPRequest = {\n  body: any | null;\n  queries: Record<string, string>;\n  params: Record<string, string>;\n  headers: Record<string, string>;\n  cookies: Record<string, string>;\n};\n\nexport function endpoint<\n  TExt extends Extensions,\n  TQuery extends NonNullable<Required<LinzEndpoint>[\"parameters\"][\"query\"]>,\n  THeader extends NonNullable<Required<LinzEndpoint>[\"parameters\"][\"header\"]>,\n  TPath extends NonNullable<Required<LinzEndpoint>[\"parameters\"][\"path\"]>,\n  TCookie extends NonNullable<Required<LinzEndpoint>[\"parameters\"][\"cookie\"]>,\n  TBody extends NonNullable<LinzEndpoint[\"requestBody\"]> | ConstructorParameters<typeof JsonBody>[0],\n  TResponse extends LinzEndpoint[\"responses\"]\n>(endpoint: {\n  tags?: Tag[];\n  summary?: string;\n  description?: string;\n  operationId: string;\n  parameters?: {\n    query?: TQuery;\n    header?: THeader;\n    path?: TPath;\n    cookie?: TCookie\n  };\n  requestBody?: TBody;\n  responses: TResponse;\n  deprecated?: boolean;\n  security?: Security<any>[];\n  handler: (\n    req: Readonly<{\n      queries: z.infer<TQuery>\n      headers: z.infer<THeader>\n      params: z.infer<TPath>\n      cookies: z.infer<TCookie>\n      body: z.infer<TBody extends RequestBody ? TBody[\"body\"] : TBody>\n    }>,\n    extensions: TExt\n  ) => Promise<MergedResponse<TResponse> | HttpResponse<MergedResponse<TResponse>>>;\n}): LinzEndpoint {\n  return {\n    ...endpoint,\n    ...(endpoint.requestBody && !(endpoint.requestBody instanceof RequestBody) && {\n      requestBody: new JsonBody(endpoint.requestBody)\n    })\n  } as LinzEndpoint;\n}\n\nexport class HttpResponse<T> {\n  constructor(\n    public readonly payload: {\n      readonly headers?: Record<string, string>;\n      readonly status?: number;\n      readonly body?: T | ReadableStream;\n    }\n  ) {}\n}\n\ntype SecurityConfig = OpenAPIV3.SecuritySchemeObject & {\n  name: string;\n  handler: (req: Readonly<HTTPRequest>, extensions: Extensions) => Promise<void>;\n};\n\nexport class Security<T> {\n  public readonly inner: SecurityConfig;\n\n  constructor(config: SecurityConfig) {\n    this.inner = config;\n  }\n\n  use(flow: string, scopes: string[]): this {\n    return this;\n  }\n}\n\nexport class ApiError extends Error {\n  constructor(\n    public readonly status: number,\n    public readonly msg: string\n  ) {\n    super(msg);\n  }\n}\n\nexport class ValidationError extends Error {\n  constructor(public readonly msg: Record<string, any>) {\n    super(JSON.stringify(msg));\n  }\n}\n\nabstract class RequestBody<B extends z.ZodType = any> {\n  private _desc: string | null = null;\n\n  abstract readonly body: B;\n  abstract mimeType: string;\n\n  describe(description: string): this {\n    this._desc = description;\n    return this;\n  }\n\n  get description(): string | null {\n    return this._desc;\n  }\n}\n\nexport class JsonBody<B extends z.ZodFirstPartySchemaTypes = any> extends RequestBody<B> {\n  static readonly mimeType = \"application/json\";\n\n  constructor(\n    public readonly body: B\n  ) {\n    super();\n  }\n\n  override get mimeType(): string {\n    return JsonBody.mimeType;\n  }\n}\n\nexport class FormDataBody<\n  B extends ZodObject<Record<string, ZodParameterTypes | z.ZodType<File, z.ZodTypeDef, File>>> = any,\n  K extends keyof z.infer<B> = any\n> extends RequestBody<B> {\n  static readonly mimeType = \"multipart/form-data\";\n\n  constructor(\n    public readonly body: B,\n    public readonly encoding?: Record<K, Readonly<EncodingItem>>\n  ) {\n    super();\n  }\n\n  override get mimeType(): string {\n    return FormDataBody.mimeType;\n  }\n}\n\nexport class UrlEncodedBody<\n  B extends ZodObject<Record<string, ZodParameterTypes>> = any,\n  K extends keyof z.infer<B> = any\n> extends RequestBody<B> {\n  static readonly mimeType = \"application/x-www-form-urlencoded\";\n\n  constructor(\n    public readonly body: B,\n    public readonly encoding?: Record<K, Readonly<EncodingItem>>\n  ) {\n    super();\n  }\n\n  override get mimeType(): string {\n    return UrlEncodedBody.mimeType;\n  }\n}\n\nexport class OctetStreamBody<B extends z.ZodType<Buffer, z.ZodTypeDef, Buffer> = any> extends RequestBody<B> {\n  static readonly mimeType = \"application/octet-stream\";\n\n  constructor(\n    public readonly body: B\n  ) {\n    super();\n  }\n\n  override get mimeType(): string {\n    return OctetStreamBody.mimeType;\n  }\n}\n","import { Readable } from \"stream\";\n\nimport cors, { type CorsOptions } from \"cors\";\nimport type { Express, Response } from \"express\";\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport { SCALAR_TEMPLATE } from \"templates\";\n\nimport {\n  ApiError,\n  type HttpMethod,\n  HttpResponse,\n  type LinzEndpointGroup,\n  METHODS,\n  ValidationError\n} from \"../\";\nimport { expressBodyParser } from \"../internal/middlewares\";\nimport { formatExpressReq, prepareResponse, responseExpressError } from \"../internal/utils\";\n\ntype OpenAPIDocsOptions = {\n  vendor: \"scalar\";\n  spec: OpenAPIV3.Document;\n  docsPath: string;\n  specPath: string;\n}\n\ntype InitExpressConfig = {\n  cors: boolean | CorsOptions;\n  docs: OpenAPIDocsOptions\n};\n\nexport function initExpress(\n  app: Express,\n  endpoints: LinzEndpointGroup,\n  config?: Partial<InitExpressConfig>\n) {\n  if (config?.cors) {\n    app.use(cors(typeof config.cors === \"boolean\" ? {} : config.cors));\n  }\n\n  app.use(expressBodyParser);\n\n  console.log(`[server]: Registering ${Object.keys(endpoints).length} endpoints...`);\n\n  const registeredOpId = new Set<string>();\n  for (const [ methodPath, operatorObject ] of Object.entries(endpoints)) {\n    const [ method = \"\", ...pathParts ] = methodPath.split(\":\");\n    const path = pathParts.join(\":\");\n\n    if (registeredOpId.has(operatorObject.operationId)) {\n      throw new Error(`Duplicate operation ID \"${operatorObject.operationId}\" for path ${path}`);\n    } else {\n      registeredOpId.add(operatorObject.operationId);\n    }\n\n    if (!METHODS.some((m) => m === method)) {\n      throw new Error(`Invalid method \"${method}\" for path ${path}`);\n    }\n\n    console.log(`[register]: ${operatorObject.operationId} -> ${method.toUpperCase()} ${path}`);\n\n    app[method as HttpMethod](path, async (req, res) => {\n      const extensions = {};\n\n      try {\n        // validate\n        const validatedReq = formatExpressReq(req, operatorObject);\n\n        // process auth (if has) sequentially\n        if (operatorObject.security?.length) {\n          for (const secOp of operatorObject.security) {\n            await secOp.inner.handler(validatedReq, extensions);\n          }\n        }\n\n        // process main handler\n        const tmpResult = await operatorObject.handler(validatedReq, extensions);\n        const result = tmpResult instanceof HttpResponse ? tmpResult : new HttpResponse({ body: tmpResult });\n        const usedStatus = result.payload.status ?? (method === \"post\" ? 201 : 200);\n\n        // validate result\n        const responseValidator = operatorObject.responses[usedStatus] || operatorObject.responses[\"default\"];\n\n        if (!responseValidator || typeof responseValidator === \"boolean\" || typeof responseValidator === \"string\") {\n          console.error(\n            `[error]: There is no corresponding validator defined in schema for status ${usedStatus}/default`\n          );\n          throw new Error(\"Internal server error\");\n        }\n\n        try {\n          responseValidator.parse(result.payload.body);\n        } catch (err) {\n          console.error(\n            \"[error]: Invalid output format to the corresponding defined output schema\"\n          );\n          console.error(String(err));\n          throw new Error(\"Internal server error\");\n        }\n\n        // response\n        if (result.payload.body instanceof Readable) {\n          res.header(result.payload.headers);\n\n          result.payload.body.pipe(res);\n        } else {\n          const preparedResult = prepareResponse(result.payload.body);\n\n          if (preparedResult) {\n            res\n              .contentType(preparedResult.contentType)\n              .status(usedStatus)\n              .header(result.payload.headers)\n              .send(preparedResult.body);\n          } else {\n            res\n              .header(result.payload.headers)\n              .end();\n          }\n        }\n      } catch (err) {\n        handleError(err, res);\n      }\n    });\n  }\n\n  // docs config\n  if (config?.docs) {\n    registerDocsEndpoints(app, config.docs);\n  }\n\n  // fallback\n  registerNotFoundHandler(app);\n}\n\nfunction handleError(err: unknown, res: Response) {\n  if (err instanceof ApiError) {\n    res.status(err.status).send({\n      statusCode: err.status,\n      message: err.message\n    });\n  } else if (err instanceof ValidationError) {\n    res.status(400).send({\n      statusCode: 400,\n      message: Object.entries(JSON.parse(err.message)).map(([ k, v ]) => ({\n        in: k,\n        result: v\n      }))\n    });\n  } else if (err instanceof Error) {\n    console.error(String(err));\n    res.status(500).send({\n      statusCode: 500,\n      message: err.message\n    });\n  } else {\n    console.error(String(err));\n    res.status(500).send({\n      statusCode: 500,\n      message: String(err)\n    });\n  }\n}\n\nfunction registerDocsEndpoints(app: Express, options: OpenAPIDocsOptions) {\n  app.get(options.docsPath, (req, res) => {\n    res\n      .contentType(\"html\")\n      .send(\n        SCALAR_TEMPLATE\n          .replace(\"{{title}}\", options.spec.info.title)\n          .replace(\"{{specUrl}}\", options.specPath)\n      );\n  });\n  app.get(options.specPath, (req, res) => {\n    res\n      .contentType(\"json\")\n      .send(JSON.stringify(options.spec, null, 2));\n  });\n}\n\nfunction registerNotFoundHandler(app: Express) {\n  app.all(\"*\", (req, res) => {\n    responseExpressError(res, 404, `Cannot find ${req.method.toUpperCase()} ${req.path}`);\n  });\n}\n","export const SCALAR_TEMPLATE\n= `<!doctype html>\n<html>\n  <head>\n    <title>{{title}}</title>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    <script id=\"api-reference\" data-url=\"{{specUrl}}\"></script>\n    <script>\n      var configuration = {\n        theme: 'purple',\n      }\n\n      document.getElementById('api-reference').dataset.configuration =\n        JSON.stringify(configuration)\n    </script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@scalar/api-reference\"></script>\n  </body>\n</html>`;\n","import { NextFunction, Request, Response } from \"express\";\nimport { mapValues } from \"lodash\";\n\nimport * as multipart from \"./multipart\";\nimport { responseExpressError } from \"./utils\";\n\nconst HEADER_CONTENT_TYPE = \"content-type\";\n\nexport function expressBodyParser(req: Request, res: Response, next: NextFunction): void {\n  const bufferChunks: Buffer[] = [];\n\n  req.on(\"data\", (chunk: Buffer) => bufferChunks.push(chunk));\n\n  req.on(\"end\", async () => {\n    if (req.method === \"GET\") {\n      return next();\n    } else if (req.headers[HEADER_CONTENT_TYPE] === \"application/json\") {\n      const rawBody = Buffer.concat(bufferChunks);\n\n      try {\n        if (rawBody.length) {\n          req.body = JSON.parse(rawBody.toString(\"utf-8\"));\n        }\n      } catch (err) {\n        return responseExpressError(res, 400, \"Invalid JSON\");\n      }\n\n      return next();\n    } else if (req.headers[HEADER_CONTENT_TYPE]?.startsWith(\"multipart/form-data\")) {\n      const rawBody = Buffer.concat(bufferChunks);\n\n      const boundary = multipart.getBoundary(req.headers[\"content-type\"]);\n\n      if (!boundary) {\n        return responseExpressError(res, 400, \"Cannot find multipart boundary\");\n      }\n\n      const parts = multipart.parse(rawBody, boundary);\n      \n      // collect data\n      const mergedItems = {} as Record<string, (string | File)[]>;\n      for (const part of parts) {\n        if (!part.name) {\n          continue;\n        }\n\n        const data = part.filename\n          ? new File([ part.data ], part.filename, part.type ? {\n            type: part.type\n          } : {})\n          : part.data.toString(\"utf-8\");\n\n        (mergedItems[part.name] ??= []).push(data);\n      }\n\n      // validate\n      const err = [];\n      for (const [ key, values = [] ] of Object.entries(mergedItems)) {\n        if (values.length > 1) {\n          err.push({\n            field: key,\n            message: \"Duplicated key\"\n          });\n        }\n      }\n\n      if (err.length) {\n        return responseExpressError(\n          res,\n          400,\n          JSON.stringify({\n            in: \"body\",\n            result: err.map(({ field, message }) => ({\n              path: [ field ],\n              message\n            }))\n          })\n        );\n      }\n\n      req.body = mapValues(mergedItems, (v) => v[0]);\n\n      return next();\n    } else if (req.headers[HEADER_CONTENT_TYPE] === \"application/x-www-form-urlencoded\") {\n      const data = Buffer.concat(bufferChunks).toString(\"utf-8\");\n      const dataUrl = new URLSearchParams(data);\n\n      const duplicatedKeys: string[] = [];\n      Array.from(dataUrl.keys()).reduce((acc, x) => {\n        if (acc.has(x)) {\n          duplicatedKeys.push(x);\n        }\n        return acc.add(x);\n      }, new Set<string>());\n\n      if (duplicatedKeys.length) {\n        return responseExpressError(\n          res,\n          400,\n          JSON.stringify({\n            in: \"body\",\n            result: duplicatedKeys.map((fieldName) => ({\n              path: [ fieldName ],\n              message: \"Duplicated key\"\n            }))\n          })\n        );\n      }\n\n      req.body = Object.fromEntries(dataUrl);\n\n      return next();\n    } else if (req.headers[HEADER_CONTENT_TYPE] === \"application/octet-stream\") {\n      req.body = Buffer.concat(bufferChunks);\n\n      return next();\n    } else {\n      return responseExpressError(res, 415, `'${req.headers[HEADER_CONTENT_TYPE]}' content type is not supported`);\n    }\n  });\n\n  req.on(\"error\", (err) => {\n    responseExpressError(res, 500, String(err));\n  });\n}\n","// Modified from https://github.com/nachomazzara/parse-multipart-data\n\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-plusplus */\n\n/**\n * Multipart Parser (Finite State Machine)\n * usage:\n * const multipart = require('./multipart.js');\n * const body = multipart.DemoData(); \t\t\t\t\t\t\t   // raw body\n * const body = Buffer.from(event['body-json'].toString(),'base64'); // AWS case\n * const boundary = multipart.getBoundary(event.params.header['content-type']);\n * const parts = multipart.Parse(body,boundary);\n * each part is:\n * { filename: 'A.txt', type: 'text/plain', data: <Buffer 41 41 41 41 42 42 42 42> }\n *  or { name: 'key', data: <Buffer 41 41 41 41 42 42 42 42> }\n */\n\ntype Part = {\n  headers: Record<string, string>;\n  part: number[]\n}\n\ntype Input = {\n  headers: Record<string, string>;\n  filename?: string\n  name?: string\n  type?: string\n  data: Buffer\n}\n\nenum ParsingState {\n  INIT,\n  READING_HEADERS,\n  READING_DATA,\n  READING_PART_SEPARATOR\n}\n\nexport function parse(multipartBodyBuffer: Buffer, boundary: string): Input[] {\n  let lastline = \"\";\n  let state: ParsingState = ParsingState.INIT;\n  let buffer: number[] = [];\n  const allParts: Input[] = [];\n\n  let currentPartHeaders: string[] = [];\n  let formattedCurrentHeaders: Record<string, string> = {};\n\n  for (let i = 0; i < multipartBodyBuffer.length; i++) {\n    const oneByte: number = multipartBodyBuffer[i] ?? NaN;\n    const prevByte: number | null = i > 0 ? (multipartBodyBuffer[i - 1] ?? null) : null;\n    // 0x0a => \\n\n    // 0x0d => \\r\n    const newLineDetected: boolean = oneByte === 0x0a && prevByte === 0x0d;\n    const newLineChar: boolean = oneByte === 0x0a || oneByte === 0x0d;\n\n    if (!newLineChar) {lastline += String.fromCharCode(oneByte);}\n    if (ParsingState.INIT === state && newLineDetected) {\n      // searching for boundary\n      if (`--${boundary}` === lastline) {\n        state = ParsingState.READING_HEADERS; // found boundary. start reading headers\n      }\n      lastline = \"\";\n    } else if (ParsingState.READING_HEADERS === state && newLineDetected) {\n      // parsing headers. Headers are separated by an empty line from the content. Stop reading headers when the line is empty\n      if (lastline.length) {\n        currentPartHeaders.push(lastline);\n      } else {\n        // found empty line. search for the headers we want and set the values\n        formattedCurrentHeaders = Object.fromEntries(\n          currentPartHeaders.flatMap((h) => {\n            const [ header, content = \"\" ] = h.split(\":\");\n\n            return header?.trim()\n              ? [[ header.trim().toLocaleLowerCase(), content?.trim() ]]\n              : [];\n          })\n        );\n        state = ParsingState.READING_DATA;\n        buffer = [];\n      }\n      lastline = \"\";\n    } else if (ParsingState.READING_DATA === state) {\n      // parsing data\n      if (lastline.length > boundary.length + 4) {\n        lastline = \"\"; // mem save\n      }\n      if (`--${boundary}` === lastline) {\n        const j = buffer.length - lastline.length;\n        const part = buffer.slice(0, j - 1);\n\n        allParts.push(\n          process({ headers: formattedCurrentHeaders, part })\n        );\n        buffer = [];\n        currentPartHeaders = [];\n        formattedCurrentHeaders = {};\n        lastline = \"\";\n        state = ParsingState.READING_PART_SEPARATOR;\n      } else {\n        buffer.push(oneByte);\n      }\n      if (newLineDetected) {\n        lastline = \"\";\n      }\n    } else if (ParsingState.READING_PART_SEPARATOR === state) {\n      if (newLineDetected) {\n        state = ParsingState.READING_HEADERS;\n      }\n    }\n  }\n  return allParts;\n}\n\n//  read the boundary from the content-type header sent by the http client\n//  this value may be similar to:\n//  'multipart/form-data; boundary=----WebKitFormBoundaryvm5A9tzU1ONaGP5B',\nexport function getBoundary(header: string): string | null {\n  const items = header.split(\";\");\n  for (const item of items) {\n    const formattedItem = String(item).trim();\n    if (formattedItem.startsWith(\"boundary\")) {\n      const k = formattedItem.split(\"=\");\n      return String(k[1]).trim().replace(/^[\"']|[\"']$/g, \"\");\n    }\n  }\n  return null;\n}\n\nfunction process(part: Part): Input {\n  // will transform this object:\n  // { header: 'Content-Disposition: form-data; name=\"uploads[]\"; filename=\"A.txt\"',\n  // info: 'Content-Type: text/plain',\n  // part: 'AAAABBBB' }\n  // into this one:\n  // { filename: 'A.txt', type: 'text/plain', data: <Buffer 41 41 41 41 42 42 42 42> }\n  const [ , name, filename ] = part.headers[\"content-disposition\"]?.split(\";\") ?? [];\n\n  // always process the name field\n  const input = {\n    headers: part.headers,\n    name: name?.split(\"=\")[1]?.replace(/\"/g, \"\"),\n    data: Buffer.from(part.part)\n  };\n\n  if (filename) {\n    const [ k, v ] = filename.split(\"=\").map((x) => x.trim());\n\n    Object.assign(input, {\n      ...((k && v) && { [k]: JSON.parse(v) }),\n      type: part.headers[\"content-type\"]?.split(\":\")[1]?.trim()\n    });\n  }\n\n  return input as Input;\n}\n","import type { Request, Response } from \"express\";\n\nimport { type HTTPRequest, type LinzEndpoint, ValidationError } from \"../core\";\n\nexport function formatExpressReq(req: Request, validator: LinzEndpoint): Readonly<HTTPRequest> {\n  const errors = {} as ConstructorParameters<typeof ValidationError>[0];\n\n  const body = tryCatch(\n    () => validator.requestBody?.body.parse(req.body) || req.body,\n    (err: any) => (errors[\"body\"] = JSON.parse(err.message))\n  );\n  const queries = tryCatch(\n    () => validator.parameters?.query?.parse(req.query) || req.query,\n    (err: any) => (errors[\"queries\"] = JSON.parse(err.message))\n  );\n  const params = tryCatch(\n    () => validator.parameters?.path?.parse(req.params) || req.params,\n    (err: any) => (errors[\"params\"] = JSON.parse(err.message))\n  );\n  const headers = tryCatch(\n    () => validator.parameters?.header?.parse(req.headers) || req.headers,\n    (err: any) => (errors[\"headers\"] = JSON.parse(err.message))\n  );\n  const cookies = tryCatch(\n    () => validator.parameters?.cookie?.parse(req.cookies) || req.cookies,\n    (err: any) => (errors[\"cookies\"] = JSON.parse(err.message))\n  );\n\n  if (Object.keys(errors).length) {\n    throw new ValidationError(errors);\n  }\n\n  return {\n    body: body ?? null,\n    queries: (queries as Record<string, string>) ?? {},\n    params: (params as Record<string, string>) ?? {},\n    headers: (headers as Record<string, string>) ?? {},\n    cookies: (cookies as Record<string, string>) ?? {}\n  };\n}\n\nexport function responseExpressError(res: Response, statusCode: number, message: string, loggerScope?: string): void {\n  if (typeof loggerScope === \"string\") {\n    if (loggerScope) {\n      console.error(`[error:${loggerScope}]: ${message}`);\n    } else {\n      console.error(`[error]: ${message}`);\n    }\n  }\n\n  res\n    .status(statusCode)\n    .contentType(\"application/json\")\n    .send({ statusCode, message });\n}\n\ntype PreparedResponse = {\n  contentType: string;\n  body: string | Buffer;\n};\n\nexport function prepareResponse<T>(body: T): PreparedResponse | null {\n  if (typeof body === \"undefined\") {\n    return null;\n  }\n  if (typeof body === \"string\" || typeof body === \"number\" || typeof body === \"boolean\") {\n    return {\n      contentType: \"text/plain\",\n      body: String(body)\n    };\n  }\n  if (Array.isArray(body) || typeof body === \"object\" || body === null) {\n    return {\n      contentType: \"application/json\",\n      body: JSON.stringify(body)\n    };\n  }\n  if (Buffer.isBuffer(body)) {\n    return {\n      contentType: \"application/octet-stream\",\n      body\n    };\n  }\n  if (body instanceof URLSearchParams) {\n    return {\n      contentType: \"application/x-www-form-urlencoded\",\n      body: Array.from(body)\n        .map((item) => item.map(encodeURIComponent).join(\"=\"))\n        .join(\"&\")\n    };\n  }\n\n  return {\n    contentType: \"text/plain\",\n    body: String(body)\n  };\n}\n\nexport function convertPathParams(path: string): { path: string, params: string[] } {\n  const paramRegex = /:([^/]+)/g;\n\n  const newPath = cleanPath(path).replace(paramRegex, \"{$1}\");\n\n  const paramNames: string[] = [];\n  let match: RegExpExecArray | null = null;\n  while ((match = paramRegex.exec(path)) !== null) {\n    paramNames.push(match[1]!);\n  }\n\n  return {\n    path: newPath,\n    params: paramNames\n  };\n}\n\nexport function cleanPath(path: string): string {\n  return path.replace(/\\/+/gi, \"/\");\n}\n\nfunction tryCatch<T>(fn: () => T, handler: (err: unknown) => void): T | null {\n  try {\n    return fn();\n  } catch (err) {\n    handler(err);\n    return null;\n  }\n}\n","import { generateSchema } from \"@anatine/zod-openapi\";\nimport httpStatus from \"http-status\";\nimport { isEmpty, keyBy, mapValues, omit, upperFirst } from \"lodash\";\nimport { OpenAPIV3 } from \"openapi-types\";\nimport { z } from \"zod\";\n\nimport { convertPathParams } from \"./internal/utils\";\n\nimport { FormDataBody, JsonBody, LinzEndpoint, LinzEndpointGroup, Security, UrlEncodedBody } from \".\";\n\nconst GENERAL_API_ERROR_COMPONENT_NAME = \"GeneralApiError\";\nconst VALIDATION_ERROR_COMPONENT_NAME = \"ValidationError\";\n\nconst ZOD_ERROR_ITEM = z.object({\n  code: z.string(),\n  expected: z.string(),\n  received: z.string(),\n  path: z.string().array(),\n  message: z.string()\n});\n\nconst ZOD_ERROR_SCHEMA = z.object({\n  in: z.enum([ \"body\", \"queries\", \"params\", \"headers\", \"cookies\" ])\n    .describe(\"The part of a request where data validation failed\"),\n  result: z.array(ZOD_ERROR_ITEM)\n    .describe(\"An array of error items\")\n});\n\nconst GENERAL_ERROR_SCHEMA = z.object({\n  statusCode: z.number().int().min(100).max(599)\n    .describe(\"The HTTP response status code\"),\n  message: z.string()\n    .describe(\"The message associated with the error\")\n})\n  .describe(\"A general HTTP error response\");\n\nconst VALIDATION_ERROR_SCHEMA = GENERAL_ERROR_SCHEMA.extend({\n  message: z.union([\n    z.array(ZOD_ERROR_SCHEMA)\n      .describe(\"An array of error schemas detailing validation issues\"),\n    z.string()\n      .describe(\"Alternatively, a simple error message\")\n  ])\n})\n  .describe(\"An error related to the validation process with more detailed information\");\n\nexport type BuilderConfig = {\n  openapi: \"3.0.3\";\n  info: OpenAPIV3.Document[\"info\"];\n  servers?: OpenAPIV3.Document[\"servers\"];\n  tags?: Record<string, OpenAPIV3.TagObject>;\n  paths: LinzEndpointGroup;\n  security?: Security<any>[];\n};\n\nexport function buildJson(config: BuilderConfig): OpenAPIV3.Document {\n  const transformedPath: OpenAPIV3.Document[\"paths\"] = {};\n\n  const schemaComponent: NonNullable<OpenAPIV3.ComponentsObject[\"schemas\"]> = {};\n\n  for (const [ methodPath, operationObject ] of Object.entries(config.paths)) {\n    const [ method, ...pathParts ] = methodPath.split(\":\");\n    const { path } = convertPathParams(pathParts.join(\":\"));\n\n    const parameterObject: OpenAPIV3.ParameterObject[] = [];\n    const pathObject = transformedPath[path] ?? {};\n\n    // collect parameters\n    for (const [ type, schema ] of Object.entries(operationObject.parameters ?? {})) {\n      const { properties = {}, required = [] } = generateSchema(schema) as OpenAPIV3.SchemaObject;\n\n      for (const [ name, itemSchema ] of Object.entries(properties)) {\n        if (\"$ref\" in itemSchema) {\n          continue;\n        }\n\n        const { description, ...schema } = itemSchema;\n        const isItemRequired = required.includes(name);\n\n        parameterObject.push({\n          name,\n          in: type,\n          ...(description && { description }),\n          ...(isItemRequired && { required: isItemRequired }),\n          schema\n        });\n      }\n    }\n\n    // collect body objects\n    const requestBodySchemaName = `${upperFirst(operationObject.operationId)}RequestBody`;\n    if (operationObject.requestBody && operationObject.requestBody.body._def.typeName !== z.ZodVoid.name) {\n      const schema = generateSchema(operationObject.requestBody.body) as OpenAPIV3.SchemaObject;\n\n      schemaComponent[requestBodySchemaName]\n        = operationObject.requestBody instanceof FormDataBody\n          ? intoFormDataBody(schema)\n          : schema;\n    }\n\n    // collect response objects\n    const responseSchemaName = `${upperFirst(operationObject.operationId)}Response`;\n    for (const [ , schema ] of Object.entries(operationObject.responses ?? {})) {\n      if (typeof schema === \"object\" && schema._def.typeName !== z.ZodVoid.name) {\n        schemaComponent[responseSchemaName] = generateSchema(schema) as OpenAPIV3.SchemaObject;\n      }\n    }\n\n    // wrap up\n    pathObject[method as OpenAPIV3.HttpMethods] = {\n      ...(operationObject.tags?.length && {\n        tags: Object.values(operationObject.tags).map((v) => v.name)\n      }),\n      summary: operationObject.summary || operationObject.operationId,\n      ...(operationObject.description && {\n        description: operationObject.description\n      }),\n      operationId: operationObject.operationId,\n      ...(operationObject.deprecated && {\n        deprecated: operationObject.deprecated\n      }),\n      ...(!isEmpty(parameterObject) && {\n        parameters: parameterObject\n      }),\n      ...(operationObject.security?.length && {\n        security: operationObject.security.map((sec) => ({\n          [sec.inner.name]: []\n        }))\n      }),\n      ...(operationObject.requestBody && {\n        requestBody: {\n          ...(operationObject.requestBody.description && {\n            description: operationObject.requestBody.description\n          }),\n          content: intoContentTypeRef(\n            operationObject.requestBody.mimeType,\n            requestBodySchemaName,\n            operationObject.requestBody.body._def.typeName === z.ZodVoid.name,\n            operationObject.requestBody instanceof FormDataBody || operationObject.requestBody instanceof UrlEncodedBody\n              ? operationObject.requestBody.encoding\n              : undefined\n          ),\n          required: !operationObject.requestBody.body.isOptional()\n        }\n      }),\n      responses: {\n        ...mapValues(operationObject.responses, (v, k) => {\n          return {\n            description: (typeof v === \"string\" ? v : null)\n              || httpStatus[`${k}` as keyof typeof httpStatus].toString()\n              || \"No description\",\n            content:\n              typeof v === \"boolean\" || typeof v === \"string\"\n                ? intoContentTypeRef(JsonBody.mimeType, GENERAL_API_ERROR_COMPONENT_NAME)\n                : intoContentTypeRef(JsonBody.mimeType, responseSchemaName, v?._def.typeName === z.ZodVoid.name)\n          };\n        }),\n        ...((operationObject.requestBody || !isEmpty(operationObject.parameters)) && {\n          \"400\": {\n            description: getResponseStatusDesc(operationObject.responses, 400) || \"Misformed data in a sending request\",\n            content: intoContentTypeRef(JsonBody.mimeType, VALIDATION_ERROR_COMPONENT_NAME)\n          }\n        }),\n        ...(operationObject.security?.length && {\n          \"401\": {\n            description: getResponseStatusDesc(operationObject.responses, 401) || httpStatus[401],\n            content: intoContentTypeRef(JsonBody.mimeType, GENERAL_API_ERROR_COMPONENT_NAME)\n          }\n        }),\n        \"500\": {\n          description: getResponseStatusDesc(operationObject.responses, 500) || \"Server unhandled or runtime error that may occur\",\n          content: intoContentTypeRef(JsonBody.mimeType, GENERAL_API_ERROR_COMPONENT_NAME)\n        }\n      }\n    };\n\n    transformedPath[path] = pathObject;\n  }\n\n  return {\n    openapi: config.openapi,\n    info: config.info,\n    paths: transformedPath,\n    components: {\n      schemas: {\n        ...schemaComponent,\n        [GENERAL_API_ERROR_COMPONENT_NAME]: generateSchema(GENERAL_ERROR_SCHEMA),\n        [VALIDATION_ERROR_COMPONENT_NAME]: generateSchema(VALIDATION_ERROR_SCHEMA)\n      },\n      ...(config.security?.length && {\n        securitySchemes: mapValues(\n          keyBy(config.security.map((x) => x.inner), \"name\"),\n          (o) => omit<typeof o, keyof typeof o>(o, [ \"handler\", \"name\" ]) as OpenAPIV3.SecuritySchemeObject\n        )\n      })\n    },\n    ...((config.tags && !isEmpty(config.tags)) && {\n      tags: Object.values(config.tags)\n    })\n  };\n}\n\nfunction intoContentTypeRef(\n  contentType: string,\n  schemaComponentName: string,\n  isVoid?: boolean,\n  encoding?: FormDataBody[\"encoding\"]\n): Pick<OpenAPIV3.ResponseObject, \"content\"> {\n  if (isVoid) {\n    return {\n      [contentType]: {}\n    };\n  }\n  \n  return {\n    [contentType]: {\n      schema: {\n        $ref: `#/components/schemas/${schemaComponentName}`\n      },\n      ...(encoding && {\n        encoding: mapValues(encoding, (v) => ({\n          ...v,\n          ...(v.contentType && {\n            contentType: v.contentType.join(\", \")\n          }),\n          ...(v.headers && {\n            headers: generateSchema(v.headers)[\"properties\"]\n          })\n        }))\n      })\n    }\n  };\n}\n\nfunction intoFormDataBody(schema: OpenAPIV3.SchemaObject): OpenAPIV3.SchemaObject {\n  return {\n    type: schema.type,\n    properties: mapValues(schema.properties, (fieldProp) => (\n      \"nullable\" in fieldProp && fieldProp.nullable && Object.keys(fieldProp).length === 1\n        ? { type: \"string\", format: \"binary\" }\n        : fieldProp\n    ))\n  } as OpenAPIV3.SchemaObject;\n}\n\nfunction getResponseStatusDesc(response: LinzEndpoint[\"responses\"], status: number): string | null {\n  const tmp = response[status];\n  return typeof tmp === \"string\" ? tmp : null;\n}\n","import { intersection, mapKeys, mapValues } from \"lodash\";\n\nimport { cleanPath } from \"./internal/utils\";\n\nimport { LinzEndpoint, LinzEndpointGroup } from \".\";\n\n/**\n * Merges multiple endpoint groups into a single group, applying a prefix to all keys.\n * This function ensures that no duplicate keys are present across the groups,\n * and throws an error if duplication occurs. It returns the merged group with the prefixed keys.\n *\n * @param {string} prefix - A string prefix to prepend to each endpoint key in the groups.\n * @param {LinzEndpointGroup[]} groups - An array of endpoint groups to be merged. Each group is a map of endpoint keys to configurations.\n *\n * @returns {LinzEndpointGroup} - A single merged endpoint group with prefixed keys. All keys are cleaned using `cleanPath`,\n *                                and any keys with collisions are reported as an error.\n *\n * @throws {Error} Throws an error if duplicate keys are found after applying the prefix to the groups.\n */\nexport function mergeEndpointGroups(\n  prefix: string,\n  groups: LinzEndpointGroup[]\n): LinzEndpointGroup {\n  const readKeys: string[] = [];\n  const dupKeys: string[] = [];\n\n  for (const group of groups) {\n    const keys = Object.keys(group).map((key) => cleanPath(`${prefix}${key}`));\n\n    dupKeys.push(...intersection(readKeys, keys));\n    readKeys.push(...keys);\n  }\n\n  if (dupKeys.length) {\n    throw new Error(`Duplicated keys occured: ${dupKeys.join(\", \")}`);\n  }\n\n  return mapKeys(Object.assign({}, ...groups), (v, k) => cleanPath(k.replace(/:/, `:${prefix}`)));\n}\n\n/**\n * Applies a common configuration to all endpoints within a given group of `LinzEndpoint`.\n * The function merges the provided configuration (`tags` and `security`) with each endpoint's\n * existing configuration.\n *\n * @param {LinzEndpointGroup} group - A group of endpoints, where each endpoint has its own configuration.\n * @param {Object} config - An object containing common configuration options to apply to each endpoint.\n * @param {LinzEndpoint[\"tags\"]} [config.tags] - Optional tags to apply to each endpoint in the group.\n * @param {LinzEndpoint[\"security\"]} [config.security] - Optional security configuration to apply to each endpoint in the group.\n *\n * @returns {LinzEndpointGroup} - A new group of endpoints with the merged configuration for each endpoint.\n */\nexport function applyGroupConfig(\n  group: LinzEndpointGroup,\n  config: {\n    tags?: LinzEndpoint[\"tags\"];\n    security?: LinzEndpoint[\"security\"];\n  }\n): LinzEndpointGroup {\n  return mapValues(group, (endpoint) => Object.assign(endpoint, config));\n}\n"],"mappings":"AAuDO,IAAMA,EAAU,CAAE,MAAO,OAAQ,MAAO,QAAS,QAAS,EAgB1D,SAASC,GAQdA,EAyBe,CACf,MAAO,CACL,GAAGA,EACH,GAAIA,EAAS,aAAe,EAAEA,EAAS,uBAAuBC,IAAgB,CAC5E,YAAa,IAAIC,EAASF,EAAS,WAAW,CAChD,CACF,CACF,CAEO,IAAMG,EAAN,KAAsB,CAC3B,YACkBC,EAKhB,CALgB,aAAAA,CAKf,CACL,EAOaC,EAAN,KAAkB,CAGvB,YAAYC,EAAwB,CAClC,KAAK,MAAQA,CACf,CAEA,IAAIC,EAAcC,EAAwB,CACxC,OAAO,IACT,CACF,EAEaC,EAAN,cAAuB,KAAM,CAClC,YACkBC,EACAC,EAChB,CACA,MAAMA,CAAG,EAHO,YAAAD,EACA,SAAAC,CAGlB,CACF,EAEaC,EAAN,cAA8B,KAAM,CACzC,YAA4BD,EAA0B,CACpD,MAAM,KAAK,UAAUA,CAAG,CAAC,EADC,SAAAA,CAE5B,CACF,EAEeV,EAAf,KAAsD,CAAtD,cACE,KAAQ,MAAuB,KAK/B,SAASY,EAA2B,CAClC,YAAK,MAAQA,EACN,IACT,CAEA,IAAI,aAA6B,CAC/B,OAAO,KAAK,KACd,CACF,EAEaC,EAAN,MAAMA,UAA6Db,CAAe,CAGvF,YACkBc,EAChB,CACA,MAAM,EAFU,UAAAA,CAGlB,CAEA,IAAa,UAAmB,CAC9B,OAAOD,EAAS,QAClB,CACF,EAZaA,EACK,SAAW,mBADtB,IAAMZ,EAANY,EAcME,EAAN,MAAMA,UAGHf,CAAe,CAGvB,YACkBc,EACAE,EAChB,CACA,MAAM,EAHU,UAAAF,EACA,cAAAE,CAGlB,CAEA,IAAa,UAAmB,CAC9B,OAAOD,EAAa,QACtB,CACF,EAhBaA,EAIK,SAAW,sBAJtB,IAAME,EAANF,EAkBMG,EAAN,MAAMA,UAGHlB,CAAe,CAGvB,YACkBc,EACAE,EAChB,CACA,MAAM,EAHU,UAAAF,EACA,cAAAE,CAGlB,CAEA,IAAa,UAAmB,CAC9B,OAAOE,EAAe,QACxB,CACF,EAhBaA,EAIK,SAAW,oCAJtB,IAAMC,EAAND,EAkBME,EAAN,MAAMA,UAAiFpB,CAAe,CAG3G,YACkBc,EAChB,CACA,MAAM,EAFU,UAAAA,CAGlB,CAEA,IAAa,UAAmB,CAC9B,OAAOM,EAAgB,QACzB,CACF,EAZaA,EACK,SAAW,2BADtB,IAAMC,EAAND,EC7NP,OAAS,YAAAE,OAAgB,SAEzB,OAAOC,OAAgC,OCFhC,IAAMC,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;SCAF,OAAS,aAAAC,OAAiB,SCqCnB,SAASC,EAAMC,EAA6BC,EAA2B,CAC5E,IAAIC,EAAW,GACXC,EAAsB,EACtBC,EAAmB,CAAC,EAClBC,EAAoB,CAAC,EAEvBC,EAA+B,CAAC,EAChCC,EAAkD,CAAC,EAEvD,QAASC,EAAI,EAAGA,EAAIR,EAAoB,OAAQQ,IAAK,CACnD,IAAMC,EAAkBT,EAAoBQ,CAAC,GAAK,IAC5CE,EAA0BF,EAAI,EAAKR,EAAoBQ,EAAI,CAAC,GAAK,KAAQ,KAGzEG,EAA2BF,IAAY,IAAQC,IAAa,GAIlE,GAH6BD,IAAY,IAAQA,IAAY,KAE1CP,GAAY,OAAO,aAAaO,CAAO,GAChCN,IAAtB,GAA+BQ,EAE7B,KAAKV,CAAQ,KAAOC,IACtBC,EAAQ,GAEVD,EAAW,WAC+BC,IAAjC,GAA0CQ,EAE/CT,EAAS,OACXI,EAAmB,KAAKJ,CAAQ,GAGhCK,EAA0B,OAAO,YAC/BD,EAAmB,QAASM,GAAM,CAChC,GAAM,CAAEC,EAAQC,EAAU,EAAG,EAAIF,EAAE,MAAM,GAAG,EAE5C,OAAOC,GAAQ,KAAK,EAChB,CAAC,CAAEA,EAAO,KAAK,EAAE,kBAAkB,EAAGC,GAAS,KAAK,CAAE,CAAC,EACvD,CAAC,CACP,CAAC,CACH,EACAX,EAAQ,EACRC,EAAS,CAAC,GAEZF,EAAW,WAC4BC,IAA9B,EAAqC,CAK9C,GAHID,EAAS,OAASD,EAAS,OAAS,IACtCC,EAAW,IAET,KAAKD,CAAQ,KAAOC,EAAU,CAChC,IAAMa,EAAIX,EAAO,OAASF,EAAS,OAC7Bc,EAAOZ,EAAO,MAAM,EAAGW,EAAI,CAAC,EAElCV,EAAS,KACPY,GAAQ,CAAE,QAASV,EAAyB,KAAAS,CAAK,CAAC,CACpD,EACAZ,EAAS,CAAC,EACVE,EAAqB,CAAC,EACtBC,EAA0B,CAAC,EAC3BL,EAAW,GACXC,EAAQ,CACV,MACEC,EAAO,KAAKK,CAAO,EAEjBE,IACFT,EAAW,GAEf,MAAmDC,IAAxC,GACLQ,IACFR,EAAQ,EAGd,CACA,OAAOE,CACT,CAKO,SAASa,EAAYL,EAA+B,CACzD,IAAMM,EAAQN,EAAO,MAAM,GAAG,EAC9B,QAAWO,KAAQD,EAAO,CACxB,IAAME,EAAgB,OAAOD,CAAI,EAAE,KAAK,EACxC,GAAIC,EAAc,WAAW,UAAU,EAAG,CACxC,IAAMC,EAAID,EAAc,MAAM,GAAG,EACjC,OAAO,OAAOC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,eAAgB,EAAE,CACvD,CACF,CACA,OAAO,IACT,CAEA,SAASL,GAAQD,EAAmB,CAOlC,GAAM,CAAE,CAAEO,EAAMC,CAAS,EAAIR,EAAK,QAAQ,qBAAqB,GAAG,MAAM,GAAG,GAAK,CAAC,EAG3ES,EAAQ,CACZ,QAAST,EAAK,QACd,KAAMO,GAAM,MAAM,GAAG,EAAE,CAAC,GAAG,QAAQ,KAAM,EAAE,EAC3C,KAAM,OAAO,KAAKP,EAAK,IAAI,CAC7B,EAEA,GAAIQ,EAAU,CACZ,GAAM,CAAEF,EAAGI,CAAE,EAAIF,EAAS,MAAM,GAAG,EAAE,IAAKG,GAAMA,EAAE,KAAK,CAAC,EAExD,OAAO,OAAOF,EAAO,CACnB,GAAKH,GAAKI,GAAM,CAAE,CAACJ,CAAC,EAAG,KAAK,MAAMI,CAAC,CAAE,EACrC,KAAMV,EAAK,QAAQ,cAAc,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,KAAK,CAC1D,CAAC,CACH,CAEA,OAAOS,CACT,CCtJO,SAASG,EAAiBC,EAAcC,EAAgD,CAC7F,IAAMC,EAAS,CAAC,EAEVC,EAAOC,EACX,IAAMH,EAAU,aAAa,KAAK,MAAMD,EAAI,IAAI,GAAKA,EAAI,KACxDK,GAAcH,EAAO,KAAU,KAAK,MAAMG,EAAI,OAAO,CACxD,EACMC,EAAUF,EACd,IAAMH,EAAU,YAAY,OAAO,MAAMD,EAAI,KAAK,GAAKA,EAAI,MAC1DK,GAAcH,EAAO,QAAa,KAAK,MAAMG,EAAI,OAAO,CAC3D,EACME,EAASH,EACb,IAAMH,EAAU,YAAY,MAAM,MAAMD,EAAI,MAAM,GAAKA,EAAI,OAC1DK,GAAcH,EAAO,OAAY,KAAK,MAAMG,EAAI,OAAO,CAC1D,EACMG,EAAUJ,EACd,IAAMH,EAAU,YAAY,QAAQ,MAAMD,EAAI,OAAO,GAAKA,EAAI,QAC7DK,GAAcH,EAAO,QAAa,KAAK,MAAMG,EAAI,OAAO,CAC3D,EACMI,EAAUL,EACd,IAAMH,EAAU,YAAY,QAAQ,MAAMD,EAAI,OAAO,GAAKA,EAAI,QAC7DK,GAAcH,EAAO,QAAa,KAAK,MAAMG,EAAI,OAAO,CAC3D,EAEA,GAAI,OAAO,KAAKH,CAAM,EAAE,OACtB,MAAM,IAAIQ,EAAgBR,CAAM,EAGlC,MAAO,CACL,KAAMC,GAAQ,KACd,QAAUG,GAAsC,CAAC,EACjD,OAASC,GAAqC,CAAC,EAC/C,QAAUC,GAAsC,CAAC,EACjD,QAAUC,GAAsC,CAAC,CACnD,CACF,CAEO,SAASE,EAAqBC,EAAeC,EAAoBC,EAAiBC,EAA4B,CAC/G,OAAOA,GAAgB,UAEvB,QAAQ,MADNA,EACY,UAAUA,CAAW,MAAMD,CAAO,GAElC,YAAYA,CAAO,EAFiB,EAMtDF,EACG,OAAOC,CAAU,EACjB,YAAY,kBAAkB,EAC9B,KAAK,CAAE,WAAAA,EAAY,QAAAC,CAAQ,CAAC,CACjC,CAOO,SAASE,EAAmBb,EAAkC,CACnE,OAAI,OAAOA,EAAS,IACX,KAEL,OAAOA,GAAS,UAAY,OAAOA,GAAS,UAAY,OAAOA,GAAS,UACnE,CACL,YAAa,aACb,KAAM,OAAOA,CAAI,CACnB,EAEE,MAAM,QAAQA,CAAI,GAAK,OAAOA,GAAS,UAAYA,IAAS,KACvD,CACL,YAAa,mBACb,KAAM,KAAK,UAAUA,CAAI,CAC3B,EAEE,OAAO,SAASA,CAAI,EACf,CACL,YAAa,2BACb,KAAAA,CACF,EAEEA,aAAgB,gBACX,CACL,YAAa,oCACb,KAAM,MAAM,KAAKA,CAAI,EAClB,IAAKc,GAASA,EAAK,IAAI,kBAAkB,EAAE,KAAK,GAAG,CAAC,EACpD,KAAK,GAAG,CACb,EAGK,CACL,YAAa,aACb,KAAM,OAAOd,CAAI,CACnB,CACF,CAEO,SAASe,EAAkBC,EAAkD,CAClF,IAAMC,EAAa,YAEbC,EAAUC,EAAUH,CAAI,EAAE,QAAQC,EAAY,MAAM,EAEpDG,EAAuB,CAAC,EAC1BC,EAAgC,KACpC,MAAQA,EAAQJ,EAAW,KAAKD,CAAI,KAAO,MACzCI,EAAW,KAAKC,EAAM,CAAC,CAAE,EAG3B,MAAO,CACL,KAAMH,EACN,OAAQE,CACV,CACF,CAEO,SAASD,EAAUH,EAAsB,CAC9C,OAAOA,EAAK,QAAQ,QAAS,GAAG,CAClC,CAEA,SAASf,EAAYqB,EAAaC,EAA2C,CAC3E,GAAI,CACF,OAAOD,EAAG,CACZ,OAASpB,EAAK,CACZ,OAAAqB,EAAQrB,CAAG,EACJ,IACT,CACF,CFxHA,IAAMsB,EAAsB,eAErB,SAASC,EAAkBC,EAAcC,EAAeC,EAA0B,CACvF,IAAMC,EAAyB,CAAC,EAEhCH,EAAI,GAAG,OAASI,GAAkBD,EAAa,KAAKC,CAAK,CAAC,EAE1DJ,EAAI,GAAG,MAAO,SAAY,CACxB,GAAIA,EAAI,SAAW,MACjB,OAAOE,EAAK,EACP,GAAIF,EAAI,QAAQF,CAAmB,IAAM,mBAAoB,CAClE,IAAMO,EAAU,OAAO,OAAOF,CAAY,EAE1C,GAAI,CACEE,EAAQ,SACVL,EAAI,KAAO,KAAK,MAAMK,EAAQ,SAAS,OAAO,CAAC,EAEnD,MAAc,CACZ,OAAOC,EAAqBL,EAAK,IAAK,cAAc,CACtD,CAEA,OAAOC,EAAK,CACd,SAAWF,EAAI,QAAQF,CAAmB,GAAG,WAAW,qBAAqB,EAAG,CAC9E,IAAMO,EAAU,OAAO,OAAOF,CAAY,EAEpCI,EAAqBC,EAAYR,EAAI,QAAQ,cAAc,CAAC,EAElE,GAAI,CAACO,EACH,OAAOD,EAAqBL,EAAK,IAAK,gCAAgC,EAGxE,IAAMQ,EAAkBC,EAAML,EAASE,CAAQ,EAGzCI,EAAc,CAAC,EACrB,QAAWC,KAAQH,EAAO,CACxB,GAAI,CAACG,EAAK,KACR,SAGF,IAAMC,EAAOD,EAAK,SACd,IAAI,KAAK,CAAEA,EAAK,IAAK,EAAGA,EAAK,SAAUA,EAAK,KAAO,CACnD,KAAMA,EAAK,IACb,EAAI,CAAC,CAAC,EACJA,EAAK,KAAK,SAAS,OAAO,GAE7BD,EAAYC,EAAK,IAAI,IAAM,CAAC,GAAG,KAAKC,CAAI,CAC3C,CAGA,IAAMC,EAAM,CAAC,EACb,OAAW,CAAEC,EAAKC,EAAS,CAAC,CAAE,IAAK,OAAO,QAAQL,CAAW,EACvDK,EAAO,OAAS,GAClBF,EAAI,KAAK,CACP,MAAOC,EACP,QAAS,gBACX,CAAC,EAIL,OAAID,EAAI,OACCR,EACLL,EACA,IACA,KAAK,UAAU,CACb,GAAI,OACJ,OAAQa,EAAI,IAAI,CAAC,CAAE,MAAAG,EAAO,QAAAC,CAAQ,KAAO,CACvC,KAAM,CAAED,CAAM,EACd,QAAAC,CACF,EAAE,CACJ,CAAC,CACH,GAGFlB,EAAI,KAAOmB,GAAUR,EAAcS,GAAMA,EAAE,CAAC,CAAC,EAEtClB,EAAK,EACd,SAAWF,EAAI,QAAQF,CAAmB,IAAM,oCAAqC,CACnF,IAAMe,EAAO,OAAO,OAAOV,CAAY,EAAE,SAAS,OAAO,EACnDkB,EAAU,IAAI,gBAAgBR,CAAI,EAElCS,EAA2B,CAAC,EAQlC,OAPA,MAAM,KAAKD,EAAQ,KAAK,CAAC,EAAE,OAAO,CAACE,EAAKC,KAClCD,EAAI,IAAIC,CAAC,GACXF,EAAe,KAAKE,CAAC,EAEhBD,EAAI,IAAIC,CAAC,GACf,IAAI,GAAa,EAEhBF,EAAe,OACVhB,EACLL,EACA,IACA,KAAK,UAAU,CACb,GAAI,OACJ,OAAQqB,EAAe,IAAKG,IAAe,CACzC,KAAM,CAAEA,CAAU,EAClB,QAAS,gBACX,EAAE,CACJ,CAAC,CACH,GAGFzB,EAAI,KAAO,OAAO,YAAYqB,CAAO,EAE9BnB,EAAK,EACd,KAAO,QAAIF,EAAI,QAAQF,CAAmB,IAAM,4BAC9CE,EAAI,KAAO,OAAO,OAAOG,CAAY,EAE9BD,EAAK,GAELI,EAAqBL,EAAK,IAAK,IAAID,EAAI,QAAQF,CAAmB,CAAC,iCAAiC,CAE/G,CAAC,EAEDE,EAAI,GAAG,QAAUc,GAAQ,CACvBR,EAAqBL,EAAK,IAAK,OAAOa,CAAG,CAAC,CAC5C,CAAC,CACH,CF9FO,SAASY,GACdC,EACAC,EACAC,EACA,CACIA,GAAQ,MACVF,EAAI,IAAIG,GAAK,OAAOD,EAAO,MAAS,UAAY,CAAC,EAAIA,EAAO,IAAI,CAAC,EAGnEF,EAAI,IAAII,CAAiB,EAEzB,QAAQ,IAAI,yBAAyB,OAAO,KAAKH,CAAS,EAAE,MAAM,eAAe,EAEjF,IAAMI,EAAiB,IAAI,IAC3B,OAAW,CAAEC,EAAYC,CAAe,IAAK,OAAO,QAAQN,CAAS,EAAG,CACtE,GAAM,CAAEO,EAAS,GAAI,GAAGC,CAAU,EAAIH,EAAW,MAAM,GAAG,EACpDI,EAAOD,EAAU,KAAK,GAAG,EAE/B,GAAIJ,EAAe,IAAIE,EAAe,WAAW,EAC/C,MAAM,IAAI,MAAM,2BAA2BA,EAAe,WAAW,cAAcG,CAAI,EAAE,EAK3F,GAHEL,EAAe,IAAIE,EAAe,WAAW,EAG3C,CAACI,EAAQ,KAAMC,GAAMA,IAAMJ,CAAM,EACnC,MAAM,IAAI,MAAM,mBAAmBA,CAAM,cAAcE,CAAI,EAAE,EAG/D,QAAQ,IAAI,eAAeH,EAAe,WAAW,OAAOC,EAAO,YAAY,CAAC,IAAIE,CAAI,EAAE,EAE1FV,EAAIQ,CAAoB,EAAEE,EAAM,MAAOG,EAAKC,IAAQ,CAClD,IAAMC,EAAa,CAAC,EAEpB,GAAI,CAEF,IAAMC,EAAeC,EAAiBJ,EAAKN,CAAc,EAGzD,GAAIA,EAAe,UAAU,OAC3B,QAAWW,KAASX,EAAe,SACjC,MAAMW,EAAM,MAAM,QAAQF,EAAcD,CAAU,EAKtD,IAAMI,EAAY,MAAMZ,EAAe,QAAQS,EAAcD,CAAU,EACjEK,EAASD,aAAqBE,EAAeF,EAAY,IAAIE,EAAa,CAAE,KAAMF,CAAU,CAAC,EAC7FG,EAAaF,EAAO,QAAQ,SAAWZ,IAAW,OAAS,IAAM,KAGjEe,EAAoBhB,EAAe,UAAUe,CAAU,GAAKf,EAAe,UAAU,QAE3F,GAAI,CAACgB,GAAqB,OAAOA,GAAsB,WAAa,OAAOA,GAAsB,SAC/F,cAAQ,MACN,6EAA6ED,CAAU,UACzF,EACM,IAAI,MAAM,uBAAuB,EAGzC,GAAI,CACFC,EAAkB,MAAMH,EAAO,QAAQ,IAAI,CAC7C,OAASI,EAAK,CACZ,cAAQ,MACN,2EACF,EACA,QAAQ,MAAM,OAAOA,CAAG,CAAC,EACnB,IAAI,MAAM,uBAAuB,CACzC,CAGA,GAAIJ,EAAO,QAAQ,gBAAgBK,GACjCX,EAAI,OAAOM,EAAO,QAAQ,OAAO,EAEjCA,EAAO,QAAQ,KAAK,KAAKN,CAAG,MACvB,CACL,IAAMY,EAAiBC,EAAgBP,EAAO,QAAQ,IAAI,EAEtDM,EACFZ,EACG,YAAYY,EAAe,WAAW,EACtC,OAAOJ,CAAU,EACjB,OAAOF,EAAO,QAAQ,OAAO,EAC7B,KAAKM,EAAe,IAAI,EAE3BZ,EACG,OAAOM,EAAO,QAAQ,OAAO,EAC7B,IAAI,CAEX,CACF,OAASI,EAAK,CACZI,GAAYJ,EAAKV,CAAG,CACtB,CACF,CAAC,CACH,CAGIZ,GAAQ,MACV2B,GAAsB7B,EAAKE,EAAO,IAAI,EAIxC4B,GAAwB9B,CAAG,CAC7B,CAEA,SAAS4B,GAAYJ,EAAcV,EAAe,CAC5CU,aAAeO,EACjBjB,EAAI,OAAOU,EAAI,MAAM,EAAE,KAAK,CAC1B,WAAYA,EAAI,OAChB,QAASA,EAAI,OACf,CAAC,EACQA,aAAeQ,EACxBlB,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,WAAY,IACZ,QAAS,OAAO,QAAQ,KAAK,MAAMU,EAAI,OAAO,CAAC,EAAE,IAAI,CAAC,CAAES,EAAGC,CAAE,KAAO,CAClE,GAAID,EACJ,OAAQC,CACV,EAAE,CACJ,CAAC,EACQV,aAAe,OACxB,QAAQ,MAAM,OAAOA,CAAG,CAAC,EACzBV,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,WAAY,IACZ,QAASU,EAAI,OACf,CAAC,IAED,QAAQ,MAAM,OAAOA,CAAG,CAAC,EACzBV,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,WAAY,IACZ,QAAS,OAAOU,CAAG,CACrB,CAAC,EAEL,CAEA,SAASK,GAAsB7B,EAAcmC,EAA6B,CACxEnC,EAAI,IAAImC,EAAQ,SAAU,CAACtB,EAAKC,IAAQ,CACtCA,EACG,YAAY,MAAM,EAClB,KACCsB,EACG,QAAQ,YAAaD,EAAQ,KAAK,KAAK,KAAK,EAC5C,QAAQ,cAAeA,EAAQ,QAAQ,CAC5C,CACJ,CAAC,EACDnC,EAAI,IAAImC,EAAQ,SAAU,CAACtB,EAAKC,IAAQ,CACtCA,EACG,YAAY,MAAM,EAClB,KAAK,KAAK,UAAUqB,EAAQ,KAAM,KAAM,CAAC,CAAC,CAC/C,CAAC,CACH,CAEA,SAASL,GAAwB9B,EAAc,CAC7CA,EAAI,IAAI,IAAK,CAACa,EAAKC,IAAQ,CACzBuB,EAAqBvB,EAAK,IAAK,eAAeD,EAAI,OAAO,YAAY,CAAC,IAAIA,EAAI,IAAI,EAAE,CACtF,CAAC,CACH,CKxLA,OAAS,kBAAAyB,MAAsB,uBAC/B,OAAOC,MAAgB,cACvB,OAAS,WAAAC,EAAS,SAAAC,GAAO,aAAAC,EAAW,QAAAC,GAAM,cAAAC,MAAkB,SAE5D,OAAS,KAAAC,MAAS,MAMlB,IAAMC,EAAmC,kBACnCC,GAAkC,kBAElCC,GAAiBC,EAAE,OAAO,CAC9B,KAAMA,EAAE,OAAO,EACf,SAAUA,EAAE,OAAO,EACnB,SAAUA,EAAE,OAAO,EACnB,KAAMA,EAAE,OAAO,EAAE,MAAM,EACvB,QAASA,EAAE,OAAO,CACpB,CAAC,EAEKC,GAAmBD,EAAE,OAAO,CAChC,GAAIA,EAAE,KAAK,CAAE,OAAQ,UAAW,SAAU,UAAW,SAAU,CAAC,EAC7D,SAAS,oDAAoD,EAChE,OAAQA,EAAE,MAAMD,EAAc,EAC3B,SAAS,yBAAyB,CACvC,CAAC,EAEKG,GAAuBF,EAAE,OAAO,CACpC,WAAYA,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,GAAG,EAAE,IAAI,GAAG,EAC1C,SAAS,+BAA+B,EAC3C,QAASA,EAAE,OAAO,EACf,SAAS,uCAAuC,CACrD,CAAC,EACE,SAAS,+BAA+B,EAErCG,GAA0BD,GAAqB,OAAO,CAC1D,QAASF,EAAE,MAAM,CACfA,EAAE,MAAMC,EAAgB,EACrB,SAAS,uDAAuD,EACnED,EAAE,OAAO,EACN,SAAS,uCAAuC,CACrD,CAAC,CACH,CAAC,EACE,SAAS,2EAA2E,EAWhF,SAASI,GAAUC,EAA2C,CACnE,IAAMC,EAA+C,CAAC,EAEhDC,EAAsE,CAAC,EAE7E,OAAW,CAAEC,EAAYC,CAAgB,IAAK,OAAO,QAAQJ,EAAO,KAAK,EAAG,CAC1E,GAAM,CAAEK,EAAQ,GAAGC,CAAU,EAAIH,EAAW,MAAM,GAAG,EAC/C,CAAE,KAAAI,CAAK,EAAIC,EAAkBF,EAAU,KAAK,GAAG,CAAC,EAEhDG,EAA+C,CAAC,EAChDC,EAAaT,EAAgBM,CAAI,GAAK,CAAC,EAG7C,OAAW,CAAEI,EAAMC,CAAO,IAAK,OAAO,QAAQR,EAAgB,YAAc,CAAC,CAAC,EAAG,CAC/E,GAAM,CAAE,WAAAS,EAAa,CAAC,EAAG,SAAAC,EAAW,CAAC,CAAE,EAAIC,EAAeH,CAAM,EAEhE,OAAW,CAAEI,EAAMC,CAAW,IAAK,OAAO,QAAQJ,CAAU,EAAG,CAC7D,GAAI,SAAUI,EACZ,SAGF,GAAM,CAAE,YAAAC,EAAa,GAAGN,EAAO,EAAIK,EAC7BE,EAAiBL,EAAS,SAASE,CAAI,EAE7CP,EAAgB,KAAK,CACnB,KAAAO,EACA,GAAIL,EACJ,GAAIO,GAAe,CAAE,YAAAA,CAAY,EACjC,GAAIC,GAAkB,CAAE,SAAUA,CAAe,EACjD,OAAAP,EACF,CAAC,CACH,CACF,CAGA,IAAMQ,EAAwB,GAAGC,EAAWjB,EAAgB,WAAW,CAAC,cACxE,GAAIA,EAAgB,aAAeA,EAAgB,YAAY,KAAK,KAAK,WAAaT,EAAE,QAAQ,KAAM,CACpG,IAAMiB,EAASG,EAAeX,EAAgB,YAAY,IAAI,EAE9DF,EAAgBkB,CAAqB,EACjChB,EAAgB,uBAAuBkB,EACrCC,GAAiBX,CAAM,EACvBA,CACR,CAGA,IAAMY,EAAqB,GAAGH,EAAWjB,EAAgB,WAAW,CAAC,WACrE,OAAW,CAAE,CAAEQ,CAAO,IAAK,OAAO,QAAQR,EAAgB,WAAa,CAAC,CAAC,EACnE,OAAOQ,GAAW,UAAYA,EAAO,KAAK,WAAajB,EAAE,QAAQ,OACnEO,EAAgBsB,CAAkB,EAAIT,EAAeH,CAAM,GAK/DF,EAAWL,CAA+B,EAAI,CAC5C,GAAID,EAAgB,MAAM,QAAU,CAClC,KAAM,OAAO,OAAOA,EAAgB,IAAI,EAAE,IAAKqB,GAAMA,EAAE,IAAI,CAC7D,EACA,QAASrB,EAAgB,SAAWA,EAAgB,YACpD,GAAIA,EAAgB,aAAe,CACjC,YAAaA,EAAgB,WAC/B,EACA,YAAaA,EAAgB,YAC7B,GAAIA,EAAgB,YAAc,CAChC,WAAYA,EAAgB,UAC9B,EACA,GAAI,CAACsB,EAAQjB,CAAe,GAAK,CAC/B,WAAYA,CACd,EACA,GAAIL,EAAgB,UAAU,QAAU,CACtC,SAAUA,EAAgB,SAAS,IAAKuB,IAAS,CAC/C,CAACA,EAAI,MAAM,IAAI,EAAG,CAAC,CACrB,EAAE,CACJ,EACA,GAAIvB,EAAgB,aAAe,CACjC,YAAa,CACX,GAAIA,EAAgB,YAAY,aAAe,CAC7C,YAAaA,EAAgB,YAAY,WAC3C,EACA,QAASwB,EACPxB,EAAgB,YAAY,SAC5BgB,EACAhB,EAAgB,YAAY,KAAK,KAAK,WAAaT,EAAE,QAAQ,KAC7DS,EAAgB,uBAAuBkB,GAAgBlB,EAAgB,uBAAuByB,EAC1FzB,EAAgB,YAAY,SAC5B,MACN,EACA,SAAU,CAACA,EAAgB,YAAY,KAAK,WAAW,CACzD,CACF,EACA,UAAW,CACT,GAAG0B,EAAU1B,EAAgB,UAAW,CAACqB,EAAGM,KACnC,CACL,aAAc,OAAON,GAAM,SAAWA,EAAI,OACrCO,EAAW,GAAGD,CAAC,EAA6B,EAAE,SAAS,GACvD,iBACL,QACE,OAAON,GAAM,WAAa,OAAOA,GAAM,SACnCG,EAAmBK,EAAS,SAAUzC,CAAgC,EACtEoC,EAAmBK,EAAS,SAAUT,EAAoBC,GAAG,KAAK,WAAa9B,EAAE,QAAQ,IAAI,CACrG,EACD,EACD,IAAKS,EAAgB,aAAe,CAACsB,EAAQtB,EAAgB,UAAU,IAAM,CAC3E,IAAO,CACL,YAAa8B,EAAsB9B,EAAgB,UAAW,GAAG,GAAK,sCACtE,QAASwB,EAAmBK,EAAS,SAAUxC,EAA+B,CAChF,CACF,EACA,GAAIW,EAAgB,UAAU,QAAU,CACtC,IAAO,CACL,YAAa8B,EAAsB9B,EAAgB,UAAW,GAAG,GAAK4B,EAAW,GAAG,EACpF,QAASJ,EAAmBK,EAAS,SAAUzC,CAAgC,CACjF,CACF,EACA,IAAO,CACL,YAAa0C,EAAsB9B,EAAgB,UAAW,GAAG,GAAK,mDACtE,QAASwB,EAAmBK,EAAS,SAAUzC,CAAgC,CACjF,CACF,CACF,EAEAS,EAAgBM,CAAI,EAAIG,CAC1B,CAEA,MAAO,CACL,QAASV,EAAO,QAChB,KAAMA,EAAO,KACb,MAAOC,EACP,WAAY,CACV,QAAS,CACP,GAAGC,EACH,CAACV,CAAgC,EAAGuB,EAAelB,EAAoB,EACvE,CAACJ,EAA+B,EAAGsB,EAAejB,EAAuB,CAC3E,EACA,GAAIE,EAAO,UAAU,QAAU,CAC7B,gBAAiB8B,EACfK,GAAMnC,EAAO,SAAS,IAAKoC,GAAMA,EAAE,KAAK,EAAG,MAAM,EAChDC,GAAMC,GAA+BD,EAAG,CAAE,UAAW,MAAO,CAAC,CAChE,CACF,CACF,EACA,GAAKrC,EAAO,MAAQ,CAAC0B,EAAQ1B,EAAO,IAAI,GAAM,CAC5C,KAAM,OAAO,OAAOA,EAAO,IAAI,CACjC,CACF,CACF,CAEA,SAAS4B,EACPW,EACAC,EACAC,EACAC,EAC2C,CAC3C,OAAID,EACK,CACL,CAACF,CAAW,EAAG,CAAC,CAClB,EAGK,CACL,CAACA,CAAW,EAAG,CACb,OAAQ,CACN,KAAM,wBAAwBC,CAAmB,EACnD,EACA,GAAIE,GAAY,CACd,SAAUZ,EAAUY,EAAWjB,IAAO,CACpC,GAAGA,EACH,GAAIA,EAAE,aAAe,CACnB,YAAaA,EAAE,YAAY,KAAK,IAAI,CACtC,EACA,GAAIA,EAAE,SAAW,CACf,QAASV,EAAeU,EAAE,OAAO,EAAE,UACrC,CACF,EAAE,CACJ,CACF,CACF,CACF,CAEA,SAASF,GAAiBX,EAAwD,CAChF,MAAO,CACL,KAAMA,EAAO,KACb,WAAYkB,EAAUlB,EAAO,WAAa+B,GACxC,aAAcA,GAAaA,EAAU,UAAY,OAAO,KAAKA,CAAS,EAAE,SAAW,EAC/E,CAAE,KAAM,SAAU,OAAQ,QAAS,EACnCA,CACL,CACH,CACF,CAEA,SAAST,EAAsBU,EAAqCC,EAA+B,CACjG,IAAMC,EAAMF,EAASC,CAAM,EAC3B,OAAO,OAAOC,GAAQ,SAAWA,EAAM,IACzC,CCxPA,OAAS,gBAAAC,GAAc,WAAAC,GAAS,aAAAC,OAAiB,SAmB1C,SAASC,GACdC,EACAC,EACmB,CACnB,IAAMC,EAAqB,CAAC,EACtBC,EAAoB,CAAC,EAE3B,QAAWC,KAASH,EAAQ,CAC1B,IAAMI,EAAO,OAAO,KAAKD,CAAK,EAAE,IAAKE,GAAQC,EAAU,GAAGP,CAAM,GAAGM,CAAG,EAAE,CAAC,EAEzEH,EAAQ,KAAK,GAAGK,GAAaN,EAAUG,CAAI,CAAC,EAC5CH,EAAS,KAAK,GAAGG,CAAI,CACvB,CAEA,GAAIF,EAAQ,OACV,MAAM,IAAI,MAAM,4BAA4BA,EAAQ,KAAK,IAAI,CAAC,EAAE,EAGlE,OAAOM,GAAQ,OAAO,OAAO,CAAC,EAAG,GAAGR,CAAM,EAAG,CAACS,EAAGC,IAAMJ,EAAUI,EAAE,QAAQ,IAAK,IAAIX,CAAM,EAAE,CAAC,CAAC,CAChG,CAcO,SAASY,GACdR,EACAS,EAImB,CACnB,OAAOC,GAAUV,EAAQW,GAAa,OAAO,OAAOA,EAAUF,CAAM,CAAC,CACvE","names":["METHODS","endpoint","RequestBody","JsonBody","HttpResponse","payload","Security","config","flow","scopes","ApiError","status","msg","ValidationError","description","_JsonBody","body","_FormDataBody","encoding","FormDataBody","_UrlEncodedBody","UrlEncodedBody","_OctetStreamBody","OctetStreamBody","Readable","cors","SCALAR_TEMPLATE","mapValues","parse","multipartBodyBuffer","boundary","lastline","state","buffer","allParts","currentPartHeaders","formattedCurrentHeaders","i","oneByte","prevByte","newLineDetected","h","header","content","j","part","process","getBoundary","items","item","formattedItem","k","name","filename","input","v","x","formatExpressReq","req","validator","errors","body","tryCatch","err","queries","params","headers","cookies","ValidationError","responseExpressError","res","statusCode","message","loggerScope","prepareResponse","item","convertPathParams","path","paramRegex","newPath","cleanPath","paramNames","match","fn","handler","HEADER_CONTENT_TYPE","expressBodyParser","req","res","next","bufferChunks","chunk","rawBody","responseExpressError","boundary","getBoundary","parts","parse","mergedItems","part","data","err","key","values","field","message","mapValues","v","dataUrl","duplicatedKeys","acc","x","fieldName","initExpress","app","endpoints","config","cors","expressBodyParser","registeredOpId","methodPath","operatorObject","method","pathParts","path","METHODS","m","req","res","extensions","validatedReq","formatExpressReq","secOp","tmpResult","result","HttpResponse","usedStatus","responseValidator","err","Readable","preparedResult","prepareResponse","handleError","registerDocsEndpoints","registerNotFoundHandler","ApiError","ValidationError","k","v","options","SCALAR_TEMPLATE","responseExpressError","generateSchema","httpStatus","isEmpty","keyBy","mapValues","omit","upperFirst","z","GENERAL_API_ERROR_COMPONENT_NAME","VALIDATION_ERROR_COMPONENT_NAME","ZOD_ERROR_ITEM","z","ZOD_ERROR_SCHEMA","GENERAL_ERROR_SCHEMA","VALIDATION_ERROR_SCHEMA","buildJson","config","transformedPath","schemaComponent","methodPath","operationObject","method","pathParts","path","convertPathParams","parameterObject","pathObject","type","schema","properties","required","generateSchema","name","itemSchema","description","isItemRequired","requestBodySchemaName","upperFirst","FormDataBody","intoFormDataBody","responseSchemaName","v","isEmpty","sec","intoContentTypeRef","UrlEncodedBody","mapValues","k","httpStatus","JsonBody","getResponseStatusDesc","keyBy","x","o","omit","contentType","schemaComponentName","isVoid","encoding","fieldProp","response","status","tmp","intersection","mapKeys","mapValues","mergeEndpointGroups","prefix","groups","readKeys","dupKeys","group","keys","key","cleanPath","intersection","mapKeys","v","k","applyGroupConfig","config","mapValues","endpoint"]}