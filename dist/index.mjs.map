{"version":3,"sources":["../node_modules/openapi-types/index.ts","../src/index.ts","../src/adapter.ts","../src/internal/middlewares.ts","../src/internal/multipart.ts","../src/internal/utils.ts","../src/core.ts","../src/json-builder.ts","../src/utils.ts"],"sourcesContent":[null,"export * from \"@routejs/router\";\nexport { OpenAPIV3_1 as oas3 } from \"openapi-types\";\n\nexport * from \"./adapter\";\nexport * from \"./core\";\nexport * from \"./json-builder\";\nexport * from \"./utils\";\n","import * as fs from \"fs\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport { Readable } from \"stream\";\nimport * as url from \"url\";\n\nimport { Router } from \"@routejs/router\";\nimport cors, { type CorsOptions } from \"cors\";\nimport type { OpenAPIV3_1 } from \"openapi-types\";\nimport { mapValues } from \"radash\";\n\nimport {\n  BodyParserError,\n  collectBody,\n  parseBody,\n  parseCookies,\n  type RequestBodyConfig,\n} from \"./internal/middlewares\";\nimport { formatIncomingRequest, responseError, ValidationError } from \"./internal/utils\";\n\nimport { ApiError, type HttpMethod, HttpResponse, type LinzEndpointGroup, METHODS } from \"./\";\n\nexport type CreateApiConfig = {\n  /**\n   * CORS configurations, `true` means permissive CORS.\n   */\n  cors: boolean | CorsOptions;\n  /**\n   * Configurations related to OpenAPI documents.\n   */\n  docs: {\n    /**\n     * The documents viewer.\n     */\n    viewer: \"scalar\" | \"swagger\" | \"redoc\" | \"rapidoc\" | \"spotlight-elements\";\n    /**\n     * The OpenAPI spec.\n     */\n    spec: OpenAPIV3_1.Document;\n    /**\n     * The path for users to view the docs.\n     * The docs will render to the set `viewer`.\n     */\n    docsPath: string;\n    /**\n     * The path get the OpenAPI spec file in JSON.\n     */\n    specPath: string;\n    /**\n     * The theme configurations for the docs viewer.\n     */\n    theme?: string;\n  };\n  /**\n   * Incoming requests configurations.\n   * Applies to all endpoints.\n   */\n  request: RequestBodyConfig;\n  fallbackHandler: (req: http.IncomingMessage, res: http.ServerResponse) => Promise<void>;\n};\n\nexport function createApi(\n  app: Router,\n  endpoints: LinzEndpointGroup,\n  config?: Partial<CreateApiConfig>\n) {\n  if (config?.cors) {\n    app.use(cors(typeof config.cors === \"boolean\" ? {} : config.cors));\n  }\n\n  console.log(`[server]: Registering ${Object.keys(endpoints).length} endpoints...`);\n\n  const registeredOpId = new Set<string>();\n  for (const [methodPath, operatorObject] of Object.entries(endpoints)) {\n    const [method = \"\", ...pathParts] = methodPath.split(\":\");\n    const path = pathParts.join(\":\");\n\n    if (registeredOpId.has(operatorObject.operationId)) {\n      throw new Error(`Duplicate operation ID \"${operatorObject.operationId}\" for path ${path}`);\n    } else {\n      registeredOpId.add(operatorObject.operationId);\n    }\n\n    if (!METHODS.some((m) => m === method)) {\n      throw new Error(`Invalid method \"${method}\" for path ${path}`);\n    }\n\n    console.log(`[register]: ${operatorObject.operationId} -> ${method.toUpperCase()} ${path}`);\n\n    app[method as HttpMethod](path, async (req: http.IncomingMessage, res: http.ServerResponse) => {\n      try {\n        const bodyBuffer = await collectBody(req);\n        const body = parseBody(bodyBuffer, req.headers[\"content-type\"] ?? \"\");\n\n        const extensions = {};\n\n        // process auth (if has) sequentially\n        if (operatorObject.security?.length) {\n          for (const secOp of operatorObject.security) {\n            await secOp.authenticate(req, extensions);\n          }\n        }\n\n        // validate\n        const validatedReq = formatIncomingRequest(\n          {\n            body,\n            queries: mapValues(url.parse(req.url || \"\", true).query, (v) => {\n              const vt = Array.isArray(v) ? v : [v];\n              return config?.request?.multiValueQueryString ? vt : vt.at(-1);\n            }),\n            cookies: parseCookies(req.headers.cookie ?? \"\"),\n            params: (req as any).params,\n            headers: req.headers,\n          },\n          operatorObject\n        );\n\n        // process main handler\n        const tmpResult = await operatorObject.handler(validatedReq, {\n          extensions,\n          req,\n          res,\n          ...(operatorObject.security && {\n            security: operatorObject.security,\n          }),\n        });\n        const result =\n          tmpResult instanceof HttpResponse ? tmpResult : new HttpResponse({ body: tmpResult });\n        const usedStatus = result.payload.status ?? (method === \"post\" ? 201 : 200);\n\n        if (res.headersSent) {\n          return;\n        }\n\n        // validate result\n        const responseValidator =\n          operatorObject.responses[usedStatus] || operatorObject.responses[\"default\"];\n\n        if (\n          !responseValidator ||\n          typeof responseValidator === \"boolean\" ||\n          typeof responseValidator === \"string\"\n        ) {\n          console.error(\n            `[error]: There is no corresponding validator defined in schema for status ${usedStatus}/default`\n          );\n          throw new Error(\"Internal server error\");\n        }\n\n        try {\n          responseValidator.body.parse(result.payload.body);\n        } catch (err) {\n          console.error(\n            \"[error]: Invalid output format to the corresponding defined output schema\"\n          );\n          console.error(String(err));\n          throw new Error(\"Internal server error\");\n        }\n\n        // response\n        if (\n          result.payload.body instanceof Readable ||\n          result.payload.body instanceof fs.ReadStream\n        ) {\n          res.writeHead(usedStatus, result.payload.headers);\n\n          result.payload.body.pipe(res);\n        } else if (typeof result.payload.body === \"undefined\") {\n          res.writeHead(usedStatus, result.payload.headers).end();\n        } else {\n          const out = await responseValidator.serialize(result.payload.body);\n\n          res\n            .writeHead(usedStatus, {\n              \"content-type\": responseValidator.mimeType,\n              ...out.headers,\n              ...result.payload.headers,\n            })\n            .end(out.buffer);\n        }\n      } catch (err) {\n        let statusCode: number;\n        let message: any;\n\n        if (err instanceof ApiError) {\n          statusCode = err.status;\n          message = err.message;\n        } else if (err instanceof BodyParserError) {\n          statusCode = err.statusCode;\n          message = err.message;\n        } else if (err instanceof ValidationError) {\n          statusCode = 400;\n          message = err.errors;\n        } else if (err instanceof Error) {\n          statusCode = 500;\n          message = err.message;\n          console.error(String(err));\n        } else {\n          statusCode = 500;\n          message = String(err);\n          console.error(String(err));\n        }\n\n        res.writeHead(statusCode, { \"content-type\": \"application/json\" }).end(\n          JSON.stringify({\n            statusCode,\n            message,\n          })\n        );\n      }\n    });\n  }\n\n  // docs config\n  if (config?.docs) {\n    const specJson = JSON.stringify(config.docs.spec);\n    const docTemplate = fs\n      .readFileSync(path.join(__dirname, `./templates/${config.docs.viewer}.hbs`), \"utf-8\")\n      .replace(\"{{title}}\", config.docs.spec.info.title)\n      .replace(\"{{specUrl}}\", config.docs.specPath)\n      .replace(\"{{theme}}\", config.docs.theme ?? \"\");\n\n    app.get(config.docs.specPath, (req: http.IncomingMessage, res: http.ServerResponse) => {\n      res.writeHead(200, { \"content-type\": \"application/json\" }).end(specJson);\n    });\n    app.get(config.docs.docsPath, (req: http.IncomingMessage, res: http.ServerResponse) => {\n      res.writeHead(200, { \"content-type\": \"text/html\" }).end(docTemplate);\n    });\n  }\n\n  // fallback\n  app.use(async (req: http.IncomingMessage, res: http.ServerResponse) => {\n    await config?.fallbackHandler?.(req, res);\n\n    if (res.headersSent) {\n      return;\n    }\n\n    const { pathname } = url.parse(req.url || \"\", true);\n\n    responseError(res, 404, `Cannot find ${req.method} ${pathname}`);\n  });\n}\n","import * as http from \"http\";\n\nimport { parse as parseContentType } from \"fast-content-type-parse\";\nimport { mapValues } from \"radash\";\n\nimport * as multipart from \"./multipart\";\n\n/**\n * Configurations for incoming requests.\n */\nexport type RequestBodyConfig = {\n  /**\n   * Enables parsing multiple values for a query string.\n   * If `false`, only the last value is used.\n   *\n   * @default false\n   */\n  multiValueQueryString?: boolean;\n  /**\n   * Enables parsing multiple values for `multipart/form-data`.\n   * If `false`, only the last value is used.\n   *\n   * @default false\n   */\n  multiValueFormData?: boolean;\n  /**\n   * Enables parsing multiple values for `application/x-www-form-urlencoded`.\n   * If `false`, only the last value is used.\n   *\n   * @default false\n   */\n  multiValueUrlEncoded?: boolean;\n};\n\nexport class BodyParserError extends Error {\n  statusCode: number;\n\n  constructor(statusCode: number, message: string) {\n    super(message);\n\n    this.statusCode = statusCode;\n  }\n}\n\nexport function collectBody(req: http.IncomingMessage): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    const bufferChunks: Buffer[] = [];\n\n    req.on(\"data\", (chunk: Buffer) => bufferChunks.push(chunk));\n    req.on(\"end\", () => resolve(Buffer.concat(bufferChunks)));\n    req.on(\"error\", (err) => reject(err));\n  });\n}\n\nexport function parseBody(\n  body: Buffer,\n  contentTypeHeader: string,\n  config?: RequestBodyConfig\n): any | undefined {\n  if (!body.length) {\n    return undefined;\n  }\n\n  let contentType: ReturnType<typeof parseContentType>;\n  try {\n    contentType = parseContentType(contentTypeHeader ?? \"\");\n  } catch (err) {\n    throw new BodyParserError(400, String(err));\n  }\n\n  if (contentType.type === \"application/json\") {\n    try {\n      const charset = (contentType.parameters[\"charset\"] as BufferEncoding) ?? \"utf-8\";\n\n      return JSON.parse(body.toString(charset));\n    } catch (err) {\n      throw new BodyParserError(400, String(err));\n    }\n  } else if (contentType.type === \"multipart/form-data\") {\n    const boundary = contentType.parameters[\"boundary\"]?.trim().replace(/^[\"']|[\"']$/g, \"\");\n\n    if (!boundary) {\n      throw new BodyParserError(400, \"Cannot find multipart boundary\");\n    }\n\n    const parts = multipart.parse(body, boundary);\n\n    const mergedItems: Record<string, (string | File)[]> = {};\n    for (const part of parts) {\n      const rawContentType = part.headers[\"content-type\"];\n      const contentType = rawContentType ? parseContentType(rawContentType) : null;\n      const charset = (contentType?.parameters[\"charset\"] as BufferEncoding) ?? \"utf-8\";\n\n      if (!part.name) {\n        continue;\n      }\n\n      const data = part.filename\n        ? new File([part.data], part.filename, part.type ? { type: part.type } : {})\n        : part.data.toString(charset);\n\n      (mergedItems[part.name] ??= []).push(data);\n    }\n\n    return config?.multiValueFormData ? mergedItems : mapValues(mergedItems, (v) => v.at(-1));\n  } else if (contentType.type === \"application/x-www-form-urlencoded\") {\n    const charset = (contentType?.parameters[\"charset\"] as BufferEncoding) ?? \"utf-8\";\n    const data = body.toString(charset);\n    const dataUrl = new URLSearchParams(data);\n\n    const mergedItems: Record<string, string[]> = {};\n    for (const [key, value] of dataUrl.entries()) {\n      (mergedItems[key] ??= []).push(value);\n    }\n\n    return config?.multiValueUrlEncoded ? mergedItems : mapValues(mergedItems, (v) => v.at(-1));\n  } else if (contentType.type === \"application/octet-stream\") {\n    return body;\n  } else {\n    const message = `'${contentType.type}' content type is not supported`;\n    throw new BodyParserError(415, message);\n  }\n}\n\nexport function parseCookies(cookieHeader: string): Record<string, string> {\n  return cookieHeader.split(\";\").reduce(\n    (cookies, cookie) => {\n      const [name, ...rest] = cookie.trim().split(\"=\");\n      if (!name) {\n        return cookies;\n      }\n      cookies[name] = decodeURIComponent(rest.join(\"=\"));\n      return cookies;\n    },\n    {} as Record<string, string>\n  );\n}\n","// Modified from https://github.com/nachomazzara/parse-multipart-data\n\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-plusplus */\n\n/**\n * Multipart Parser (Finite State Machine)\n * usage:\n * const multipart = require('./multipart.js');\n * const body = multipart.DemoData(); \t\t\t\t\t\t\t   // raw body\n * const body = Buffer.from(event['body-json'].toString(),'base64'); // AWS case\n * const boundary = multipart.getBoundary(event.params.header['content-type']);\n * const parts = multipart.Parse(body,boundary);\n * each part is:\n * { filename: 'A.txt', type: 'text/plain', data: <Buffer 41 41 41 41 42 42 42 42> }\n *  or { name: 'key', data: <Buffer 41 41 41 41 42 42 42 42> }\n */\n\nimport { randomBytes } from \"crypto\";\n\ntype Part = {\n  headers: Record<string, string>;\n  part: number[];\n};\n\ntype Input = {\n  headers: Record<string, string>;\n  filename?: string;\n  name?: string;\n  type?: string;\n  data: Buffer;\n};\n\nenum ParsingState {\n  INIT,\n  READING_HEADERS,\n  READING_DATA,\n  READING_PART_SEPARATOR,\n}\n\nexport function parse(multipartBodyBuffer: Buffer, boundary: string): Input[] {\n  let lastline = \"\";\n  let state: ParsingState = ParsingState.INIT;\n  let buffer: number[] = [];\n  const allParts: Input[] = [];\n\n  let currentPartHeaders: string[] = [];\n  let formattedCurrentHeaders: Record<string, string> = {};\n\n  for (let i = 0; i < multipartBodyBuffer.length; i++) {\n    const oneByte: number = multipartBodyBuffer[i] ?? NaN;\n    const prevByte: number | null = i > 0 ? (multipartBodyBuffer[i - 1] ?? null) : null;\n    // 0x0a => \\n\n    // 0x0d => \\r\n    const newLineDetected: boolean = oneByte === 0x0a && prevByte === 0x0d;\n    const newLineChar: boolean = oneByte === 0x0a || oneByte === 0x0d;\n\n    if (!newLineChar) {\n      lastline += String.fromCharCode(oneByte);\n    }\n    if (ParsingState.INIT === state && newLineDetected) {\n      // searching for boundary\n      if (`--${boundary}` === lastline) {\n        state = ParsingState.READING_HEADERS; // found boundary. start reading headers\n      }\n      lastline = \"\";\n    } else if (ParsingState.READING_HEADERS === state && newLineDetected) {\n      // parsing headers. Headers are separated by an empty line from the content. Stop reading headers when the line is empty\n      if (lastline.length) {\n        currentPartHeaders.push(lastline);\n      } else {\n        // found empty line. search for the headers we want and set the values\n        formattedCurrentHeaders = Object.fromEntries(\n          currentPartHeaders.flatMap((h) => {\n            const [header, content = \"\"] = h.split(\":\");\n\n            return header?.trim() ? [[header.trim().toLowerCase(), content?.trim()]] : [];\n          })\n        );\n        state = ParsingState.READING_DATA;\n        buffer = [];\n      }\n      lastline = \"\";\n    } else if (ParsingState.READING_DATA === state) {\n      // parsing data\n      if (lastline.length > boundary.length + 4) {\n        lastline = \"\"; // mem save\n      }\n      if (`--${boundary}` === lastline) {\n        const j = buffer.length - lastline.length;\n        const part = buffer.slice(0, j - 1);\n\n        allParts.push(process({ headers: formattedCurrentHeaders, part }));\n        buffer = [];\n        currentPartHeaders = [];\n        formattedCurrentHeaders = {};\n        lastline = \"\";\n        state = ParsingState.READING_PART_SEPARATOR;\n      } else {\n        buffer.push(oneByte);\n      }\n      if (newLineDetected) {\n        lastline = \"\";\n      }\n    } else if (ParsingState.READING_PART_SEPARATOR === state) {\n      if (newLineDetected) {\n        state = ParsingState.READING_HEADERS;\n      }\n    }\n  }\n  return allParts;\n}\n\nfunction process(part: Part): Input {\n  // will transform this object:\n  // { header: 'Content-Disposition: form-data; name=\"uploads[]\"; filename=\"A.txt\"',\n  // info: 'Content-Type: text/plain',\n  // part: 'AAAABBBB' }\n  // into this one:\n  // { filename: 'A.txt', type: 'text/plain', data: <Buffer 41 41 41 41 42 42 42 42> }\n  const contentDisposition = parseContentDisposition(part.headers[\"content-disposition\"] ?? \"\");\n\n  const result = {\n    headers: part.headers,\n    name: contentDisposition[\"name\"],\n    data: Buffer.from(part.part),\n    ...(contentDisposition[\"filename\"] && {\n      filename: contentDisposition[\"filename\"],\n      type: part.headers[\"content-type\"]?.trim(),\n    }),\n  };\n\n  return result as Input;\n}\n\nfunction parseContentDisposition(contentDisposition: string): Record<string, string | null> {\n  const result: Record<string, string | null> = {\n    type: null,\n    name: null,\n    filename: null,\n  };\n\n  // Split the header into parts\n  const parts = contentDisposition.split(\";\").map((part) => part.trim());\n\n  // The first part is the type\n  if (parts[0]) {\n    result[\"type\"] = parts[0].toLowerCase();\n  }\n\n  // Process remaining parts for key-value pairs\n  for (const part of parts.slice(1)) {\n    const [key, value] = part.split(\"=\").map((item) => item.trim());\n    if (key && value) {\n      // Remove quotes around value if present\n      result[key.toLowerCase()] = value.replace(/^\"|\"$/g, \"\");\n    }\n  }\n\n  return result;\n}\n\nexport function generateBoundary(prefix = \"----------------------\"): string {\n  return `--${prefix}${randomBytes(12).toString(\"hex\")}`;\n}\n\nexport async function encode(\n  data: Record<string, (string | File)[]>,\n  boundary = generateBoundary()\n): Promise<Buffer> {\n  const multipartFragments: Buffer[] = [];\n\n  for (const [key, values] of Object.entries(data)) {\n    for (const value of values) {\n      multipartFragments.push(Buffer.from(`--${boundary}`));\n\n      if (typeof value === \"string\") {\n        multipartFragments.push(\n          Buffer.from(`Content-Disposition: form-data; name=\"${key}\"\\r\\n\\r\\n`),\n          Buffer.from(value),\n          Buffer.from(\"\\r\\n\")\n        );\n      } else if (value instanceof File) {\n        multipartFragments.push(\n          Buffer.from(\n            `Content-Disposition: form-data; name=\"${key}\"; filename=\"${value.name}\"\\r\\n`\n          ),\n          Buffer.from(`Content-Type: ${value.type || \"application/octet-stream\"}\\r\\n\\r\\n`),\n          Buffer.from(await value.arrayBuffer()),\n          Buffer.from(\"\\r\\n\")\n        );\n      }\n    }\n  }\n\n  multipartFragments.push(Buffer.from(`--${boundary}--\\r\\n`));\n\n  return Buffer.concat(multipartFragments);\n}\n","import * as http from \"http\";\n\nimport { type HTTPMessage, type LinzEndpoint } from \"../core\";\n\nexport class ValidationError extends Error {\n  errors: { in: keyof HTTPMessage; result: any }[] = [];\n\n  constructor() {\n    super();\n  }\n\n  addIssue(issue: ValidationError[\"errors\"][number]) {\n    this.errors.push(issue);\n  }\n\n  hasIssue(): boolean {\n    return this.errors.length > 0;\n  }\n}\n\nexport function formatIncomingRequest(\n  message: Record<keyof HTTPMessage, any>,\n  validator: LinzEndpoint\n): Readonly<HTTPMessage> {\n  const errors = new ValidationError();\n\n  const resultBody = validator.requestBody?.body.safeParse(message.body);\n  if (resultBody?.error) {\n    errors.addIssue({\n      in: \"body\",\n      result: resultBody.error.errors,\n    });\n  }\n  const resultQuery = validator.parameters?.query?.safeParse(message.queries);\n  if (resultQuery?.error) {\n    errors.addIssue({\n      in: \"queries\",\n      result: resultQuery.error.errors,\n    });\n  }\n  const resultPath = validator.parameters?.path?.safeParse(message.params);\n  if (resultPath?.error) {\n    errors.addIssue({\n      in: \"params\",\n      result: resultPath.error.errors,\n    });\n  }\n  const resultHeader = validator.parameters?.header?.safeParse(message.headers);\n  if (resultHeader?.error) {\n    errors.addIssue({\n      in: \"headers\",\n      result: resultHeader.error.errors,\n    });\n  }\n  const resultCookie = validator.parameters?.cookie?.safeParse(message.cookies);\n  if (resultCookie?.error) {\n    errors.addIssue({\n      in: \"cookies\",\n      result: resultCookie.error.errors,\n    });\n  }\n\n  if (errors.hasIssue()) {\n    throw errors;\n  }\n\n  return {\n    body: resultBody?.data,\n    queries: (resultQuery?.data as HTTPMessage[\"queries\"]) ?? {},\n    params: (resultPath?.data as HTTPMessage[\"params\"]) ?? {},\n    headers: (resultHeader?.data as HTTPMessage[\"headers\"]) ?? {},\n    cookies: (resultCookie?.data as HTTPMessage[\"cookies\"]) ?? {},\n  };\n}\n\nexport function responseError(\n  res: http.ServerResponse,\n  statusCode: number,\n  message: string,\n  loggerScope?: string\n): void {\n  if (typeof loggerScope === \"string\") {\n    if (loggerScope) {\n      console.error(`[error:${loggerScope}]: ${message}`);\n    } else {\n      console.error(`[error]: ${message}`);\n    }\n  }\n\n  res\n    .writeHead(statusCode, { \"content-type\": \"application/json\" })\n    .end(JSON.stringify({ statusCode, message }));\n}\n\nexport function convertPathParams(path: string): { path: string; params: string[] } {\n  const paramRegex = /:([^/]+)/g;\n\n  const newPath = cleanPath(path).replace(paramRegex, \"{$1}\");\n\n  const paramNames: string[] = [];\n  let match: RegExpExecArray | null = null;\n  while ((match = paramRegex.exec(path)) !== null) {\n    paramNames.push(match[1]!);\n  }\n\n  return {\n    path: newPath,\n    params: paramNames,\n  };\n}\n\nexport function cleanPath(path: string): string {\n  return path.replace(/\\/+/gi, \"/\");\n}\n","import * as http from \"http\";\n\nimport type { OpenAPIV3_1 as OpenAPIType } from \"openapi-types\";\nimport { mapValues } from \"radash\";\nimport z from \"zod\";\n\nimport { encode, generateBoundary } from \"./internal/multipart\";\n\ntype ZodParameterTypes =\n  | z.ZodString\n  | z.ZodNumber\n  | z.ZodNaN\n  | z.ZodBigInt\n  | z.ZodBoolean\n  | z.ZodDate\n  | z.ZodUndefined\n  | z.ZodEnum<[string, ...string[]]>\n  | z.ZodOptional<ZodParameterTypes>\n  | z.ZodNullable<ZodParameterTypes>;\ntype ZodMultiMapValues<T extends z.ZodType = ZodParameterTypes> =\n  | z.ZodArray<T>\n  | z.ZodTuple<[T, ...T[]]>\n  | T;\n\ntype Extensions<T extends Record<string, any> = Record<string, any>> = T;\ntype Tag = OpenAPIType.TagObject;\ntype EncodingItem = {\n  contentType?: string[];\n  headers?: z.ZodObject<Record<string, ZodParameterTypes>>;\n  style?: string;\n  explode?: string;\n  allowReserved?: string;\n};\n\nexport type LinzEndpoint = {\n  tags?: Tag[];\n  summary?: string;\n  description?: string;\n  operationId: string;\n  parameters?: {\n    query?: z.ZodObject<Record<string, ZodMultiMapValues>>;\n    header?: z.ZodObject<Record<string, ZodParameterTypes>>;\n    path?: z.ZodObject<Record<string, ZodParameterTypes>>;\n    cookie?: z.ZodObject<Record<string, ZodParameterTypes>>;\n  };\n  // note: short-hand applicable\n  requestBody?: SenderBody;\n  // note: short-hand applicable\n  responses: {\n    [status: number]: SenderBody | boolean | string;\n    default?: SenderBody;\n  };\n  deprecated?: boolean;\n  security?: AppliedSecurity[];\n  handler: (\n    message: Readonly<HTTPMessage>,\n    ctx: {\n      security?: AppliedSecurity[];\n      extensions: Extensions;\n      req: http.IncomingMessage;\n      res: http.ServerResponse;\n    }\n  ) => Promise<HttpResponse<any> | HttpResponse<any>[\"payload\"][\"body\"]>;\n};\n\ntype MergeRecordType<T, U> = {\n  [K in keyof T]: T[K] | U;\n};\ntype MergeZodValues<T> = {\n  [K in keyof T]: T[K] extends z.ZodType\n    ? z.infer<T[K]>\n    : T[K] extends SenderBody\n      ? z.infer<T[K][\"body\"]>\n      : never;\n}[keyof T];\ntype MergedResponse<\n  T extends MergeRecordType<LinzEndpoint[\"responses\"], ConstructorParameters<typeof JsonBody>[0]>,\n> = MergeZodValues<T> extends infer R ? R : never;\n\nexport const METHODS = [\"get\", \"post\", \"put\", \"patch\", \"delete\"] as const;\n\nexport type HttpMethod = (typeof METHODS)[number];\n\nexport type LinzEndpointGroup = {\n  [methodPath: `${(typeof METHODS)[number]}:${string}`]: LinzEndpoint;\n};\n\nexport type HTTPMessage = {\n  /**\n   * A parsed and transformed payload from an HTTP payload body passing the defined validator.\n   */\n  body: any;\n  queries: Record<string, string[] | string>;\n  params: Record<string, string>;\n  headers: Record<string, string>;\n  cookies: Record<string, string>;\n};\n\nexport function endpoint<\n  TExt extends Extensions,\n  TQuery extends NonNullable<Required<LinzEndpoint>[\"parameters\"][\"query\"]>,\n  THeader extends NonNullable<Required<LinzEndpoint>[\"parameters\"][\"header\"]>,\n  TPath extends NonNullable<Required<LinzEndpoint>[\"parameters\"][\"path\"]>,\n  TCookie extends NonNullable<Required<LinzEndpoint>[\"parameters\"][\"cookie\"]>,\n  TBody extends\n    | NonNullable<LinzEndpoint[\"requestBody\"]>\n    | ConstructorParameters<typeof JsonBody>[0],\n  TResponse extends MergeRecordType<\n    LinzEndpoint[\"responses\"],\n    ConstructorParameters<typeof JsonBody>[0]\n  >,\n>(endpoint: {\n  tags?: Tag[];\n  summary?: string;\n  description?: string;\n  operationId: string;\n  parameters?: {\n    query?: TQuery;\n    header?: THeader;\n    path?: TPath;\n    cookie?: TCookie;\n  };\n  requestBody?: TBody;\n  responses: TResponse;\n  deprecated?: boolean;\n  security?: AppliedSecurity[];\n  handler: (\n    message: Readonly<{\n      queries: z.infer<TQuery>;\n      headers: z.infer<THeader>;\n      params: z.infer<TPath>;\n      cookies: z.infer<TCookie>;\n      body: z.infer<TBody extends SenderBody ? TBody[\"body\"] : TBody>;\n    }>,\n    ctx: {\n      security?: AppliedSecurity[];\n      extensions: TExt;\n      req: http.IncomingMessage;\n      res: http.ServerResponse;\n    }\n  ) => Promise<MergedResponse<TResponse> | HttpResponse<MergedResponse<TResponse>>>;\n}): LinzEndpoint {\n  return {\n    ...endpoint,\n    ...(endpoint.requestBody &&\n      !(endpoint.requestBody instanceof SenderBody) && {\n        requestBody: new JsonBody(endpoint.requestBody),\n      }),\n    responses: Object.fromEntries(\n      Object.entries(endpoint.responses).map(([k, v]) => [\n        k,\n        v instanceof z.ZodType ? new JsonBody(v) : v,\n      ])\n    ),\n  } as LinzEndpoint;\n}\n\nexport class HttpResponse<T> {\n  constructor(\n    public readonly payload: {\n      readonly headers?: Record<string, string>;\n      readonly status?: number;\n      readonly body?: T | ReadableStream;\n    }\n  ) {}\n\n  public static withoutBody(status: number, headers?: Record<string, string>): HttpResponse<void> {\n    return headers ? new HttpResponse({ headers, status }) : new HttpResponse({ status });\n  }\n}\n\ninterface SecurityConfig {\n  name: string;\n  schema: OpenAPIType.SecuritySchemeObject;\n  handler: (\n    req: Readonly<http.IncomingMessage>,\n    scopes: string[],\n    extensions: Extensions\n  ) => Promise<void>;\n}\n\nexport class Security implements SecurityConfig {\n  public readonly name: string;\n  public readonly schema: OpenAPIType.SecuritySchemeObject;\n  public readonly handler: (\n    req: Readonly<http.IncomingMessage>,\n    scopes: string[],\n    extensions: Extensions\n  ) => Promise<void>;\n\n  constructor(config: SecurityConfig) {\n    this.name = config.name;\n    this.schema = config.schema;\n    this.handler = config.handler;\n  }\n\n  apply(scopes: string[]): AppliedSecurity {\n    return new AppliedSecurity(this, scopes);\n  }\n}\n\nexport class AppliedSecurity {\n  public readonly scopes: string[];\n  public readonly security: Security;\n\n  constructor(usedSecurity: Security, scopes: string[]) {\n    this.scopes = scopes;\n    this.security = usedSecurity;\n  }\n\n  async authenticate(req: Readonly<http.IncomingMessage>, extensions: Extensions) {\n    await this.security.handler(req, this.scopes, extensions);\n  }\n}\n\nexport class ApiError extends Error {\n  constructor(\n    public readonly status: number,\n    public readonly msg: string\n  ) {\n    super(msg);\n  }\n}\n\ntype SerializeResult = {\n  buffer: Buffer;\n  headers: http.IncomingHttpHeaders;\n};\n\nabstract class SenderBody<B extends z.ZodType = any> {\n  /** for both `RequestBodyObject` and `ResponseObject` */\n  private _description: string | null = null;\n  /** for `ResponseObject` */\n  private _headers: z.ZodObject<Record<string, ZodParameterTypes>> | null = null;\n  /** for both `RequestBodyObject` and `ResponseObject` */\n  private _examples: Record<string, OpenAPIType.ExampleObject> | null = null;\n\n  abstract readonly body: B;\n  abstract mimeType: string;\n\n  abstract serialize<T extends z.infer<B>>(data: T): Promise<SerializeResult>;\n\n  describe(description: SenderBody[\"_description\"]): this {\n    this._description = description;\n    return this;\n  }\n\n  get description(): SenderBody[\"_description\"] {\n    return this._description;\n  }\n\n  requireHeaders(headers: SenderBody[\"_headers\"]): this {\n    this._headers = headers;\n    return this;\n  }\n\n  get requiredHeaders(): SenderBody[\"_headers\"] {\n    return this._headers;\n  }\n\n  setExamples(examples: SenderBody[\"_examples\"]): this {\n    this._examples = examples;\n    return this;\n  }\n\n  getExamples(): SenderBody[\"_examples\"] {\n    return this._examples;\n  }\n}\n\nexport class JsonBody<B extends z.ZodFirstPartySchemaTypes = any> extends SenderBody<B> {\n  static readonly mimeType: string = \"application/json\";\n\n  constructor(public readonly body: B) {\n    super();\n  }\n\n  override async serialize<T extends z.TypeOf<B>>(data: T): Promise<SerializeResult> {\n    return {\n      buffer: Buffer.from(JSON.stringify(data)),\n      headers: {},\n    };\n  }\n\n  override get mimeType(): string {\n    return JsonBody.mimeType;\n  }\n}\n\ntype FormDataValidator = ZodParameterTypes | z.ZodType<File, z.ZodTypeDef, File>;\n\nexport class FormDataBody<\n  B extends z.ZodObject<Record<string, ZodMultiMapValues<FormDataValidator>>> = any,\n  K extends keyof z.infer<B> = any,\n> extends SenderBody<B> {\n  static readonly mimeType: string = \"multipart/form-data\";\n\n  constructor(\n    public readonly body: B,\n    public readonly encoding?: Record<K, Readonly<EncodingItem>>\n  ) {\n    super();\n  }\n\n  override async serialize<T extends z.TypeOf<B>>(data: T): Promise<SerializeResult> {\n    const boundary = generateBoundary();\n\n    return {\n      buffer: await encode(\n        mapValues(data, (vx) => [vx instanceof File ? vx : String(vx)]),\n        boundary\n      ),\n      headers: {\n        \"content-type\": `${FormDataBody.mimeType}; boundary=${boundary}`,\n      },\n    };\n  }\n\n  override get mimeType(): string {\n    return FormDataBody.mimeType;\n  }\n}\n\nexport class UrlEncodedBody<\n  B extends z.ZodObject<Record<string, ZodMultiMapValues>> = any,\n  K extends keyof z.infer<B> = any,\n> extends SenderBody<B> {\n  static readonly mimeType: string = \"application/x-www-form-urlencoded\";\n\n  constructor(\n    public readonly body: B,\n    public readonly encoding?: Record<K, Readonly<EncodingItem>>\n  ) {\n    super();\n  }\n\n  override async serialize<T extends z.TypeOf<B> | URLSearchParams>(\n    data: T\n  ): Promise<SerializeResult> {\n    return {\n      buffer: Buffer.from(\n        new URLSearchParams(\n          data instanceof URLSearchParams\n            ? data\n            : Object.fromEntries(Object.entries(data).map(([k, v]) => [k, String(v)]))\n        ).toString()\n      ),\n      headers: {},\n    };\n  }\n\n  override get mimeType(): string {\n    return UrlEncodedBody.mimeType;\n  }\n}\n\nexport class OctetStreamBody<\n  B extends z.ZodType<Buffer, z.ZodTypeDef, Buffer> = any,\n> extends SenderBody<B> {\n  static readonly mimeType: string = \"application/octet-stream\";\n\n  constructor(public readonly body: B = z.instanceof(Buffer) as B) {\n    super();\n  }\n\n  override async serialize<T extends z.TypeOf<B>>(data: T): Promise<SerializeResult> {\n    return {\n      buffer: data,\n      headers: {},\n    };\n  }\n\n  override get mimeType(): string {\n    return OctetStreamBody.mimeType;\n  }\n}\n\nexport class TextBody<B extends z.ZodString = any> extends SenderBody<B> {\n  static readonly mimeType: string = \"text/plain\";\n\n  constructor(public readonly body: B = z.string() as B) {\n    super();\n  }\n\n  override async serialize<T extends z.TypeOf<B>>(data: T): Promise<SerializeResult> {\n    return {\n      buffer: Buffer.from(data),\n      headers: {},\n    };\n  }\n\n  override get mimeType(): string {\n    return TextBody.mimeType;\n  }\n}\n\nexport class HtmlBody<B extends z.ZodString = any> extends TextBody<B> {\n  static override readonly mimeType: string = \"text/html\";\n\n  override get mimeType(): string {\n    return HtmlBody.mimeType;\n  }\n}\n","import httpStatus from \"http-status\";\nimport { OpenAPIV3, OpenAPIV3_1 } from \"openapi-types\";\nimport { isEmpty, mapEntries, mapValues, pascal, shake, title } from \"radash\";\nimport { z } from \"zod\";\n\nimport { convertPathParams } from \"./internal/utils\";\n\nimport {\n  FormDataBody,\n  JsonBody,\n  LinzEndpoint,\n  LinzEndpointGroup,\n  OctetStreamBody,\n  Security,\n  UrlEncodedBody,\n} from \".\";\nimport zodToJsonSchema from \"zod-to-json-schema\";\n\nconst GENERAL_API_ERROR_COMPONENT_NAME = \"GeneralApiError\";\nconst VALIDATION_ERROR_COMPONENT_NAME = \"ValidationError\";\n\nconst ZOD_ISSUE_SCHEMA = z\n  .object({\n    code: z.enum([\n      \"invalid_type\",\n      \"invalid_literal\",\n      \"unrecognized_keys\",\n      \"invalid_union\",\n      \"invalid_union_discriminator\",\n      \"invalid_enum_value\",\n      \"invalid_arguments\",\n      \"invalid_return_type\",\n      \"invalid_date\",\n      \"invalid_string\",\n      \"too_small\",\n      \"too_big\",\n      \"invalid_intersection_types\",\n      \"not_multiple_of\",\n      \"not_finite\",\n      \"custom\",\n    ]),\n    path: z.union([z.string(), z.number().int().min(0)]).array(),\n    fatal: z.boolean().optional(),\n    message: z.string(),\n  })\n  .passthrough();\n\nconst ZOD_ERROR_SCHEMA = z.object({\n  in: z\n    .enum([\"body\", \"queries\", \"params\", \"headers\", \"cookies\"])\n    .describe(\"The part of a request where data validation failed\"),\n  result: z.array(ZOD_ISSUE_SCHEMA).describe(\"An array of error items\"),\n});\n\nconst GENERAL_ERROR_SCHEMA = z\n  .object({\n    statusCode: z.number().int().min(100).max(599).describe(\"The HTTP response status code\"),\n    message: z.string().describe(\"The message associated with the error\"),\n  })\n  .describe(\"A general HTTP error response\");\n\nconst VALIDATION_ERROR_SCHEMA = GENERAL_ERROR_SCHEMA.extend({\n  message: z.union([\n    z.array(ZOD_ERROR_SCHEMA).describe(\"An array of error schemas detailing validation issues\"),\n    z.string().describe(\"Alternatively, a simple error message\"),\n  ]),\n}).describe(\"An error related to the validation process with more detailed information\");\n\nconst JSON_SCHEMA_DIALECTS = [\n  \"https://spec.openapis.org/oas/3.1/dialect/base\",\n  \"https://spec.openapis.org/oas/3.1/dialect/2024-11-10\",\n] as const;\n\n/**\n * Configuration object for building an OpenAPI specification.\n */\nexport type BuilderConfig = {\n  /**\n   * The OpenAPI version used in the specification.\n   */\n  openapi: \"3.1.0\" | \"3.1.1\";\n  /**\n   * Information about the API, including title, description, and version.\n   */\n  info: OpenAPIV3_1.Document[\"info\"];\n  /**\n   * The default value for the `$schema` keyword within `SchemaObject` contained within this OAS document.\n   */\n  jsonSchemaDialect?: (typeof JSON_SCHEMA_DIALECTS)[number];\n  /**\n   * A list of server definitions describing where the API can be accessed.\n   */\n  servers?: OpenAPIV3_1.Document[\"servers\"];\n  /**\n   * The defined API paths and their respective operations.\n   */\n  paths: LinzEndpointGroup;\n  /**\n   * The incoming webhooks that MAY be received as part of this API and that the API consumer MAY choose to implement.\n   */\n  webhooks?: OpenAPIV3_1.Document[\"webhooks\"];\n  /**\n   * Additional external documentation.\n   */\n  externalDocs?: OpenAPIV3_1.Document[\"externalDocs\"];\n  /**\n   * Additional reusable schemas, defined using Zod types,\n   * that are not being auto-listed by `paths`.\n   */\n  additionalSchemas?: Record<string, z.ZodType>;\n};\n\n/**\n * Builds an OpenAPI JSON document based on the provided configuration.\n *\n * @param {BuilderConfig} config - The configuration object for building the OpenAPI specification.\n * @returns {OpenAPIV3_1.Document} The generated OpenAPI document.\n */\nexport function buildJson(config: BuilderConfig): OpenAPIV3_1.Document {\n  const transformedPath: OpenAPIV3_1.Document[\"paths\"] = {};\n  const collectedApplyingSecuritySet = new Set<Security>();\n  const collectedApplyingTagSet = new Set<OpenAPIV3_1.TagObject>();\n  const schemaComponent: NonNullable<OpenAPIV3_1.ComponentsObject[\"schemas\"]> = {};\n\n  for (const [methodPath, operationObject] of Object.entries(config.paths)) {\n    const [method, ...pathParts] = methodPath.split(\":\");\n    const { path } = convertPathParams(pathParts.join(\":\"));\n\n    const parameterObject: OpenAPIV3_1.ParameterObject[] = [];\n    const pathObject = transformedPath[path] ?? {};\n\n    for (const sec of operationObject.security ?? []) {\n      collectedApplyingSecuritySet.add(sec.security);\n    }\n    for (const tag of operationObject.tags ?? []) {\n      collectedApplyingTagSet.add(tag);\n    }\n\n    // collect parameters\n    for (const [type, schema] of Object.entries(operationObject.parameters ?? {})) {\n      const { properties = {}, required = [] } = toJsonSchema(schema);\n\n      for (const [name, itemSchema] of Object.entries(properties)) {\n        if (\"$ref\" in itemSchema) {\n          continue;\n        }\n\n        const { description, ...schema } = itemSchema;\n        const isItemRequired = required.includes(name);\n\n        parameterObject.push({\n          name,\n          in: type,\n          ...(description && { description }),\n          ...(isItemRequired && { required: isItemRequired }),\n          schema: schema as OpenAPIV3.SchemaObject,\n        });\n      }\n    }\n\n    // collect body objects\n    const requestBodySchemaName = `${pascal(title(operationObject.operationId))}RequestBody`;\n    if (\n      operationObject.requestBody &&\n      operationObject.requestBody.body._def.typeName !== z.ZodVoid.name &&\n      !(operationObject.requestBody instanceof OctetStreamBody)\n    ) {\n      schemaComponent[requestBodySchemaName] = toJsonSchema(\n        operationObject.requestBody.body,\n        operationObject.requestBody.mimeType\n      );\n    }\n\n    // collect response objects\n    const responseSchemaName = `${pascal(title(operationObject.operationId))}Response`;\n    for (const [, schema] of Object.entries(operationObject.responses ?? {})) {\n      if (schema instanceof OctetStreamBody) {\n        continue;\n      }\n      if (typeof schema === \"object\" && schema.body._def.typeName !== z.ZodVoid.name) {\n        schemaComponent[responseSchemaName] = toJsonSchema(schema.body, schema.mimeType);\n      }\n    }\n\n    // wrap up\n    pathObject[method as OpenAPIV3_1.HttpMethods] = {\n      ...(operationObject.tags?.length && {\n        tags: Object.values(operationObject.tags).map((v) => v.name),\n      }),\n      summary: operationObject.summary || operationObject.operationId,\n      ...(operationObject.description && {\n        description: operationObject.description,\n      }),\n      operationId: operationObject.operationId,\n      ...(operationObject.deprecated && {\n        deprecated: operationObject.deprecated,\n      }),\n      ...(!isEmpty(parameterObject) && {\n        parameters: parameterObject,\n      }),\n      ...(operationObject.security?.length && {\n        security: operationObject.security.map((sec) => ({\n          [sec.security.name]: sec.scopes,\n        })),\n      }),\n      ...(operationObject.requestBody && {\n        requestBody: {\n          ...(operationObject.requestBody.description && {\n            description: operationObject.requestBody.description,\n          }),\n          content: intoContentTypeRef(\n            operationObject.requestBody.mimeType,\n            requestBodySchemaName,\n            operationObject.requestBody.body._def.typeName === z.ZodVoid.name ||\n              operationObject.requestBody instanceof OctetStreamBody,\n            operationObject.requestBody instanceof FormDataBody ||\n              operationObject.requestBody instanceof UrlEncodedBody\n              ? operationObject.requestBody.encoding\n              : undefined\n          ),\n          required: !operationObject.requestBody.body.isOptional(),\n        },\n      }),\n      responses: {\n        ...mapValues(shake(operationObject.responses), (v, k) => ({\n          description:\n            (typeof v === \"string\" ? v : null) ||\n            String(httpStatus[`${k}` as keyof typeof httpStatus]) ||\n            \"No description\",\n          content:\n            typeof v === \"boolean\" || typeof v === \"string\"\n              ? intoContentTypeRef(JsonBody.mimeType, GENERAL_API_ERROR_COMPONENT_NAME)\n              : intoContentTypeRef(\n                  v.mimeType,\n                  responseSchemaName,\n                  v.body._def.typeName === z.ZodVoid.name || v instanceof OctetStreamBody\n                ),\n        })),\n        ...((operationObject.requestBody || !isEmpty(operationObject.parameters)) && {\n          \"400\": {\n            description: getResponseStatusDesc(operationObject.responses, 400) || httpStatus[400],\n            content: intoContentTypeRef(JsonBody.mimeType, VALIDATION_ERROR_COMPONENT_NAME),\n          },\n        }),\n        ...(operationObject.security?.length && {\n          \"401\": {\n            description: getResponseStatusDesc(operationObject.responses, 401) || httpStatus[401],\n            content: intoContentTypeRef(JsonBody.mimeType, GENERAL_API_ERROR_COMPONENT_NAME),\n          },\n        }),\n        \"500\": {\n          description: getResponseStatusDesc(operationObject.responses, 500) || httpStatus[500],\n          content: intoContentTypeRef(JsonBody.mimeType, GENERAL_API_ERROR_COMPONENT_NAME),\n        },\n      },\n    };\n\n    transformedPath[path] = pathObject;\n  }\n\n  return {\n    openapi: config.openapi,\n    info: config.info,\n    jsonSchemaDialect: config.jsonSchemaDialect ?? JSON_SCHEMA_DIALECTS[0],\n    paths: transformedPath,\n    ...(config.webhooks && {\n      webhooks: config.webhooks,\n    }),\n    components: {\n      schemas: {\n        ...schemaComponent,\n        [GENERAL_API_ERROR_COMPONENT_NAME]: toJsonSchema(GENERAL_ERROR_SCHEMA),\n        [VALIDATION_ERROR_COMPONENT_NAME]: toJsonSchema(VALIDATION_ERROR_SCHEMA),\n        ...mapEntries(config.additionalSchemas ?? {}, (k, v) => [\n          pascal(title(k)),\n          toJsonSchema(v),\n        ]),\n      },\n      ...(collectedApplyingSecuritySet.size && {\n        securitySchemes: Object.fromEntries(\n          [...collectedApplyingSecuritySet.values()].map((sec) => [sec.name, sec.schema])\n        ),\n      }),\n    },\n    tags: [...collectedApplyingTagSet.values()],\n    ...(config.externalDocs && {\n      externalDocs: config.externalDocs,\n    }),\n  };\n}\n\n// -- helpers\n\nfunction intoContentTypeRef(\n  contentType: string,\n  schemaComponentName: string,\n  isVoid?: boolean,\n  encoding?: FormDataBody[\"encoding\"]\n): Pick<OpenAPIV3_1.ResponseObject, \"content\"> {\n  if (isVoid) {\n    return {\n      [contentType]: {},\n    };\n  }\n\n  return {\n    [contentType]: {\n      schema: {\n        $ref: `#/components/schemas/${schemaComponentName}`,\n      },\n      ...(encoding && {\n        encoding: mapValues(encoding, (v) => ({\n          ...v,\n          ...(v.contentType && {\n            contentType: v.contentType.join(\", \"),\n          }),\n          ...(v.headers && {\n            headers: toJsonSchema(v.headers).properties,\n          }),\n        })),\n      }),\n    },\n  };\n}\n\nfunction getResponseStatusDesc(response: LinzEndpoint[\"responses\"], status: number): string | null {\n  const tmp = response[status];\n  return typeof tmp === \"string\" ? tmp : null;\n}\n\nfunction toJsonSchema(\n  schema: Parameters<typeof zodToJsonSchema>[0],\n  contentType?: string\n): OpenAPIV3_1.SchemaObject {\n  let jsonSchema = zodToJsonSchema(schema, {\n    target: \"jsonSchema2019-09\",\n    $refStrategy: \"none\",\n  }) as OpenAPIV3_1.SchemaObject;\n\n  if (contentType === FormDataBody.mimeType) {\n    for (const fieldName in jsonSchema.properties ?? {}) {\n      if (jsonSchema.properties && isEmpty(jsonSchema.properties[fieldName])) {\n        jsonSchema.properties[fieldName] = {\n          type: \"string\",\n          contentMediaType: \"application/octet-stream\",\n        };\n      }\n    }\n  }\n\n  delete jsonSchema[\"$schema\"];\n\n  return jsonSchema;\n}\n","import { mapKeys, mapValues } from \"radash\";\n\nimport { cleanPath } from \"./internal/utils\";\n\nimport { LinzEndpoint, LinzEndpointGroup } from \".\";\n\n/**\n * Merges multiple endpoint groups into a single group, applying a prefix to all keys.\n * This function ensures that no duplicate keys are present across the groups,\n * and throws an error if duplication occurs. It returns the merged group with the prefixed keys.\n *\n * @param {string} prefix - A string prefix to prepend to each endpoint key in the groups.\n * @param {LinzEndpointGroup[]} groups - An array of endpoint groups to be merged. Each group is a map of endpoint keys to configurations.\n *\n * @returns {LinzEndpointGroup} - A single merged endpoint group with prefixed keys. All keys are cleaned using `cleanPath`,\n *                                and any keys with collisions are reported as an error.\n *\n * @throws {Error} Throws an error if duplicate keys are found after applying the prefix to the groups.\n */\nexport function mergeEndpointGroups(\n  prefix: string,\n  groups: LinzEndpointGroup[]\n): LinzEndpointGroup {\n  const readPaths: string[] = [];\n  const dupPaths: string[] = [];\n\n  for (const group of groups) {\n    const paths = Object.keys(group).map((path) => cleanPath(`${prefix}${path}`));\n\n    dupPaths.push(...readPaths.filter((k) => paths.includes(k)));\n    readPaths.push(...paths);\n  }\n\n  if (dupPaths.length) {\n    throw new Error(`Duplicated keys occured: ${dupPaths.join(\", \")}`);\n  }\n\n  return mapKeys(Object.assign({}, ...groups), (k: string) =>\n    cleanPath(k.replace(/:/, `:${prefix}`))\n  );\n}\n\n/**\n * Applies a common configuration to all endpoints within a given group of `LinzEndpoint`.\n * The function merges the provided configuration (`tags` and `security`) with each endpoint's\n * existing configuration.\n *\n * @param {LinzEndpointGroup} group - A group of endpoints, where each endpoint has its own configuration.\n * @param {Object} config - An object containing common configuration options to apply to each endpoint.\n * @param {LinzEndpoint[\"tags\"]} [config.tags] - Optional tags to apply to each endpoint in the group.\n * @param {LinzEndpoint[\"security\"]} [config.security] - Optional security configuration to apply to each endpoint in the group.\n *\n * @returns {LinzEndpointGroup} - A new group of endpoints with the merged configuration for each endpoint.\n */\nexport function applyGroupConfig(\n  group: LinzEndpointGroup,\n  config: {\n    tags?: LinzEndpoint[\"tags\"];\n    security?: LinzEndpoint[\"security\"];\n  }\n): LinzEndpointGroup {\n  return mapValues(group, (endpoint) => Object.assign(endpoint, config));\n}\n"],"mappings":"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","names":["OpenAPIV3","HttpMethods","exports","OpenAPIV2","import_openapi_types","fs","path","Readable","url","cors","mapValues","parseContentType","mapValues","randomBytes","parse","multipartBodyBuffer","boundary","lastline","state","buffer","allParts","currentPartHeaders","formattedCurrentHeaders","i","oneByte","prevByte","newLineDetected","h","header","content","j","part","process","contentDisposition","parseContentDisposition","result","parts","key","value","item","generateBoundary","prefix","randomBytes","encode","data","multipartFragments","values","BodyParserError","statusCode","message","collectBody","req","resolve","reject","bufferChunks","chunk","err","parseBody","body","contentTypeHeader","config","contentType","parseContentType","charset","boundary","parts","parse","mergedItems","part","rawContentType","data","mapValues","v","dataUrl","key","value","parseCookies","cookieHeader","cookies","cookie","name","rest","ValidationError","issue","formatIncomingRequest","message","validator","errors","resultBody","resultQuery","resultPath","resultHeader","resultCookie","responseError","res","statusCode","loggerScope","convertPathParams","path","paramRegex","newPath","cleanPath","paramNames","match","createApi","app","endpoints","config","cors","registeredOpId","methodPath","operatorObject","method","pathParts","path","METHODS","m","req","res","bodyBuffer","collectBody","body","parseBody","extensions","secOp","validatedReq","formatIncomingRequest","mapValues","v","vt","parseCookies","tmpResult","result","HttpResponse","usedStatus","responseValidator","err","Readable","out","statusCode","message","ApiError","BodyParserError","ValidationError","specJson","docTemplate","pathname","responseError","mapValues","z","METHODS","endpoint","SenderBody","JsonBody","k","v","z","HttpResponse","_HttpResponse","payload","status","headers","Security","config","scopes","AppliedSecurity","usedSecurity","req","extensions","ApiError","msg","description","examples","_JsonBody","body","data","_FormDataBody","encoding","boundary","generateBoundary","encode","mapValues","vx","FormDataBody","_UrlEncodedBody","UrlEncodedBody","_OctetStreamBody","OctetStreamBody","_TextBody","TextBody","_HtmlBody","HtmlBody","httpStatus","isEmpty","mapEntries","mapValues","pascal","shake","title","z","zodToJsonSchema","GENERAL_API_ERROR_COMPONENT_NAME","VALIDATION_ERROR_COMPONENT_NAME","ZOD_ISSUE_SCHEMA","z","ZOD_ERROR_SCHEMA","GENERAL_ERROR_SCHEMA","VALIDATION_ERROR_SCHEMA","JSON_SCHEMA_DIALECTS","buildJson","config","transformedPath","collectedApplyingSecuritySet","collectedApplyingTagSet","schemaComponent","methodPath","operationObject","method","pathParts","path","convertPathParams","parameterObject","pathObject","sec","tag","type","schema","properties","required","toJsonSchema","name","itemSchema","description","isItemRequired","requestBodySchemaName","pascal","title","OctetStreamBody","responseSchemaName","v","isEmpty","intoContentTypeRef","FormDataBody","UrlEncodedBody","mapValues","shake","k","httpStatus","JsonBody","getResponseStatusDesc","mapEntries","contentType","schemaComponentName","isVoid","encoding","response","status","tmp","jsonSchema","fieldName","mapKeys","mapValues","mergeEndpointGroups","prefix","groups","readPaths","dupPaths","group","paths","path","cleanPath","k","mapKeys","applyGroupConfig","config","mapValues","endpoint"]}