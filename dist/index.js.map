{"version":3,"sources":["../src/index.ts","../src/adapter/engine-express.ts","../src/utils.ts","../src/json-builder.ts"],"sourcesContent":["export * from \"./adapter/engine-express\";\nexport * from \"./json-builder\";\nexport * from \"./utils\";\n\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport z, { type ZodObject, type ZodType } from \"zod\";\n\ntype ZodParameterTypes =\n  | z.ZodString\n  | z.ZodNumber\n  | z.ZodNaN\n  | z.ZodBigInt\n  | z.ZodBoolean\n  | z.ZodDate\n  | z.ZodUndefined\n  | z.ZodEnum<[string, ...string[]]>\n  | z.ZodOptional<ZodParameterTypes>\n  | z.ZodNullable<ZodParameterTypes>;\n\ntype Extensions = Record<string, any>;\ntype Tag = OpenAPIV3.TagObject;\n\nexport type LinzEndpoint = {\n  tags?: Tag[];\n  summary?: string;\n  description?: string;\n  operationId: string;\n  parameters?: {\n    query?: ZodObject<Record<string, ZodParameterTypes>>;\n    header?: ZodObject<Record<string, ZodParameterTypes>>;\n    path?: ZodObject<Record<string, ZodParameterTypes>>;\n    cookie?: ZodObject<Record<string, ZodParameterTypes>>;\n  };\n  requestBody?: z.ZodFirstPartySchemaTypes;\n  requestBodyType?: string;\n  responses: {\n    [status: number]: z.ZodFirstPartySchemaTypes | boolean;\n    default?: z.ZodFirstPartySchemaTypes;\n  };\n  deprecated?: boolean;\n  security?: Security<any>[];\n  handler: (\n    req: Readonly<HTTPRequest>,\n    extensions: Extensions\n  ) => Promise<HttpResponse<any> | HttpResponse<any>[\"body\"]>;\n};\n\ntype MergeNonBooleanValues<T> = {\n  [K in keyof T]: T[K] extends ZodType ? z.infer<T[K]> : never\n}[keyof T];\ntype MergedResponse<T extends LinzEndpoint[\"responses\"]> = MergeNonBooleanValues<T> extends infer R ? R : never;\n\nexport const METHODS = [ \"get\", \"post\", \"put\", \"patch\", \"delete\" ] as const;\n\nexport type LinzEndpointGroup = {\n  [methodPath: `${(typeof METHODS)[number]}:${string}`]: LinzEndpoint;\n};\n\nexport type HTTPRequest = {\n  body: any | null;\n  queries: Record<string, string>;\n  params: Record<string, string>;\n  headers: Record<string, string>;\n  cookies: Record<string, string>;\n};\n\nexport function endpoint<\n  TExt extends Extensions,\n  TQuery extends ZodObject<Record<string, ZodParameterTypes>>,\n  THeader extends ZodObject<Record<string, ZodParameterTypes>>,\n  TPath extends ZodObject<Record<string, ZodParameterTypes>>,\n  TCookie extends ZodObject<Record<string, ZodParameterTypes>>,\n  TBody extends z.ZodFirstPartySchemaTypes,\n  TResponse extends {\n    [status: number]: z.ZodFirstPartySchemaTypes | boolean;\n    default?: z.ZodFirstPartySchemaTypes;\n  }\n>(endpoint: {\n  tags?: Tag[];\n  summary?: string;\n  description?: string;\n  operationId: string;\n  parameters?: {\n    query?: TQuery;\n    header?: THeader;\n    path?: TPath;\n    cookie?: TCookie\n  };\n  requestBody?: TBody;\n  requestBodyType?: string;\n  responses: TResponse;\n  deprecated?: boolean;\n  security?: Security<any>[];\n  handler: (\n    req: Readonly<{\n      queries: z.infer<TQuery>\n      headers: z.infer<THeader>\n      params: z.infer<TPath>\n      cookies: z.infer<TCookie>\n      body: z.infer<TBody>;\n    }>,\n    extensions: TExt\n  ) => Promise<MergedResponse<TResponse> | HttpResponse<MergedResponse<TResponse>>>;\n}): LinzEndpoint {\n  return endpoint as any;\n}\n\nexport class HttpResponse<T> {\n  public readonly headers?: Record<string, string>;\n  public readonly status?: number;\n  public readonly body?: T;\n  public readonly stream?: boolean;\n\n  constructor(payload: {\n    headers?: HttpResponse<T>[\"headers\"];\n    status?: HttpResponse<T>[\"status\"];\n    body?: T;\n    stream?: HttpResponse<T>[\"stream\"];\n  }) {\n    this.headers = payload.headers;\n    this.status = payload.status;\n    this.body = payload.body;\n    this.stream = payload.stream;\n  }\n}\n\ntype SecurityConfig = OpenAPIV3.SecuritySchemeObject & {\n  name: string;\n  handler: (req: Readonly<HTTPRequest>, extensions: Extensions) => Promise<void>;\n};\n\nexport class Security<T> {\n  public readonly inner: SecurityConfig;\n\n  constructor(config: SecurityConfig) {\n    this.inner = config;\n  }\n\n  use(flow: string, scopes: string[]): this {\n    return this;\n  }\n}\n\nexport class ApiError extends Error {\n  constructor(\n    public readonly status: number,\n    public readonly msg: string\n  ) {\n    super(msg);\n  }\n}\n\nexport class ValidationError extends Error {\n  constructor(public readonly msg: Record<string, any>) {\n    super(JSON.stringify(msg));\n  }\n}\n","import * as fs from \"fs\";\nimport { Readable } from \"stream\";\n\nimport bodeParser from \"body-parser\";\nimport cors from \"cors\";\nimport { Express, Request, Response } from \"express\";\nimport formidable from \"formidable\";\nimport { mapValues } from \"lodash\";\n\nimport {\n  ApiError,\n  HttpResponse,\n  LinzEndpoint,\n  LinzEndpointGroup,\n  METHODS,\n  ValidationError\n} from \"../\";\nimport { formatExpressReq, prepareResponse } from \"../utils\";\n\ntype InitExpressConfig = {\n  cors: boolean;\n  docs: {\n    vendor: \"scalar\";\n    path: string;\n    specUrl: string;\n  };\n};\n\nexport function initExpress(\n  app: Express,\n  endpoints: LinzEndpointGroup,\n  config?: Partial<InitExpressConfig>\n) {\n  if (config?.cors) {\n    app.use(cors());\n  }\n\n  app.use(bodeParser.json());\n\n  console.log(`[server]: Registering ${Object.keys(endpoints).length} endpoints...`);\n\n  const registeredOpId = new Set<string>();\n  for (const [ methodPath, operatorObject ] of Object.entries(endpoints)) {\n    const [ method = \"\", ...pathParts ] = methodPath.split(/:/);\n    const path = pathParts.join(\":\");\n\n    if (registeredOpId.has(operatorObject.operationId)) {\n      throw new Error(`Duplicate operation ID \"${operatorObject.operationId}\" for path ${path}`);\n    } else {\n      registeredOpId.add(operatorObject.operationId);\n    }\n\n    if (!METHODS.some((m) => m === method)) {\n      throw new Error(`Invalid method \"${method}\" for path ${path}`);\n    }\n\n    console.log(`[register]: ${operatorObject.operationId} -> ${method.toUpperCase()} ${path}`);\n\n    app[method as (typeof METHODS)[number]](path, async (req: Request, res: Response) => {\n      const extensions = {};\n\n      // parse body for multipart/form-data\n      if (req.headers[\"content-type\"]?.startsWith(\"multipart/form-data\")) {\n        const form = formidable({});\n        const [ fields, files ] = await form.parse(req);\n\n        // collect data\n        const mergedItems = {} as Record<string, (string | File)[]>;\n        for (const [ key, values = [] ] of Object.entries(fields)) {\n          mergedItems[key] ??= [];\n          mergedItems[key]?.push(...values);\n        }\n        for (const [ key, values = [] ] of Object.entries(files)) {\n          mergedItems[key] ??= [];\n\n          const formattedValues = values.map((v) => {\n            const buffer = fs.readFileSync(v.filepath);\n            const data = new Uint8Array(buffer);\n            const file = new File([ data ], v.originalFilename || v.newFilename, {\n              type: v.mimetype || \"\"\n            });\n            fs.rmSync(v.filepath);\n\n            return file;\n          });\n\n          mergedItems[key]?.push(...formattedValues);\n        }\n\n        // validate\n        const err = [];\n        for (const [ key, values = [] ] of Object.entries(mergedItems)) {\n          if (values.length > 1) {\n            err.push({\n              field: key,\n              message: \"Duplicate keys\"\n            });\n          }\n        }\n\n        if (err.length) {\n          return handleError(\n            new ValidationError({\n              body: err\n            }),\n            res\n          );\n        }\n\n        req.body = mapValues(mergedItems, (v) => v[0]);\n      }\n\n      try {\n        // validate\n        const validatedReq = formatExpressReq(req, operatorObject);\n\n        // process auth (if has)\n        if (operatorObject.security?.length) {\n          for (const secOp of operatorObject.security) {\n            await secOp.inner.handler(validatedReq, extensions);\n          }\n        }\n\n        // process main handler\n        const result = await operatorObject.handler(validatedReq, extensions);\n\n        // validate result\n        const validate: LinzEndpoint[\"responses\"][number] | undefined = result instanceof HttpResponse\n          ? (\n            result.status\n              ? operatorObject.responses[result.status] || operatorObject.responses[\"default\"]\n              : operatorObject.responses[method === \"post\" ? 201 : 200] || operatorObject.responses[\"default\"]\n          ) : (\n            operatorObject.responses[method === \"post\" ? 201 : 200]\n              || operatorObject.responses[\"default\"]\n          );\n\n        if (!validate || typeof validate === \"boolean\") {\n          console.error(\n            `[error]: There is no corresponding validator defined in schema for status ${result?.status ?? \"default\"}`\n          );\n          throw new Error(\"Internal server error\");\n        }\n\n        try {\n          validate.parse(result instanceof HttpResponse ? result.body : result);\n        } catch (err: unknown) {\n          console.error(\n            \"[error]: Invalid output format to the corresponding defined output schema\"\n          );\n          console.error(String(err));\n          throw new Error(\"Internal server error\");\n        }\n\n        // prepare response\n        if (result instanceof HttpResponse) {\n          // FIXME: right now, support only image stream\n          if (result.body instanceof Readable) {\n            Object.entries(result.headers ?? {}).map(([ k, v ]) => res.setHeader(k, v));\n\n            result.body.pipe(res);\n\n            return;\n          }\n\n          const preparedResult = prepareResponse(result.body);\n\n          return res\n            .header(result.headers)\n            .status(result.status ?? (method === \"post\" ? 201 : 200))\n            .contentType(preparedResult.contentType)\n            .send(preparedResult.body);\n        } else {\n          const preparedResult = prepareResponse(result);\n\n          return res\n            .status(method === \"post\" ? 201 : 200)\n            .contentType(preparedResult.contentType)\n            .send(preparedResult.body);\n        }\n      } catch (err: unknown) {\n        return handleError(err, res);\n      }\n    });\n  }\n\n  // docs config\n  if (config?.docs) {\n    registerDocsEndpoints(app, config.docs.path, config.docs.specUrl);\n  }\n\n  // fallback\n  registerNotFoundHandler(app);\n}\n\nfunction handleError(err: unknown, res: Response) {\n  if (err instanceof ApiError) {\n    res.status(err.status).send({\n      statusCode: err.status,\n      message: err.message\n    });\n  } else if (err instanceof ValidationError) {\n    res.status(400).send({\n      statusCode: 400,\n      message: Object.entries(JSON.parse(err.message)).map(([ k, v ]) => ({\n        in: k,\n        result: v\n      }))\n    });\n  } else if (err instanceof Error) {\n    console.error(String(err));\n    res.status(500).send({\n      statusCode: 500,\n      message: err.message\n    });\n  } else {\n    console.error(String(err));\n    res.status(500).send(String(err));\n  }\n}\n\nfunction registerDocsEndpoints(app: Express, docPath: string, specFilePath: string) {\n  app.get(docPath, (req, res) => {\n    const data = fs.readFileSync(\"dist/index.html\", \"utf-8\");\n    res.contentType(\"html\").send(data);\n  });\n  app.get(\"/openapi.json\", (req, res) => {\n    const data = fs.readFileSync(specFilePath, \"utf-8\");\n    res.contentType(\"json\").send(data);\n  });\n}\n\nfunction registerNotFoundHandler(app: Express) {\n  app.all(\"*\", (req, res) => {\n    res.status(404).send({\n      statusCode: 404,\n      message: `Cannot find ${req.method.toUpperCase()} ${req.path}`\n    });\n  });\n}\n","import { Request } from \"express\";\nimport { compact, intersection, isEmpty, mapKeys, mapValues, merge } from \"lodash\";\n\nimport { HTTPRequest, LinzEndpoint, LinzEndpointGroup, ValidationError } from \".\";\n\n/**\n * Merges multiple endpoint groups into a single group, applying a prefix to all keys.\n * This function ensures that no duplicate keys are present across the groups,\n * and throws an error if duplication occurs. It returns the merged group with the prefixed keys.\n *\n * @param {string} prefix - A string prefix to prepend to each endpoint key in the groups.\n * @param {LinzEndpointGroup[]} groups - An array of endpoint groups to be merged. Each group is a map of endpoint keys to configurations.\n *\n * @returns {LinzEndpointGroup} - A single merged endpoint group with prefixed keys. All keys are cleaned using `cleanPath`,\n *                                and any keys with collisions are reported as an error.\n *\n * @throws {Error} Throws an error if duplicate keys are found after applying the prefix to the groups.\n */\nexport function mergeEndpointGroups(\n  prefix: string,\n  groups: LinzEndpointGroup[]\n): LinzEndpointGroup {\n  const readKeys = [] as string[];\n\n  for (const group of groups) {\n    const keys = Object.keys(group).map((key) => cleanPath(`${prefix}${key}`));\n\n    const dupKeys = intersection(readKeys, keys);\n    if (dupKeys.length) {\n      throw new Error(`Duplication keys occured: ${dupKeys.join(\", \")}`);\n    }\n\n    readKeys.push(...keys);\n  }\n\n  return mapKeys(merge({}, ...groups), (v, k) => cleanPath(k.replace(/:/, `:${prefix}`)));\n}\n\n/**\n * Applies a common configuration to all endpoints within a given group of `LinzEndpoint`.\n * The function merges the provided configuration (`tags` and `security`) with each endpoint's\n * existing configuration.\n *\n * @param {LinzEndpointGroup} group - A group of endpoints, where each endpoint has its own configuration.\n * @param {Object} config - An object containing common configuration options to apply to each endpoint.\n * @param {LinzEndpoint[\"tags\"]} [config.tags] - Optional tags to apply to each endpoint in the group.\n * @param {LinzEndpoint[\"security\"]} [config.security] - Optional security configuration to apply to each endpoint in the group.\n *\n * @returns {LinzEndpointGroup} - A new group of endpoints with the merged configuration for each endpoint.\n */\nexport function applyGroupConfig(\n  group: LinzEndpointGroup,\n  config: {\n    tags?: LinzEndpoint[\"tags\"];\n    security?: LinzEndpoint[\"security\"];\n  }\n): LinzEndpointGroup {\n  return mapValues(group, (v) => ({ ...config, ...v }));\n}\n\n/**\n * Formats and validates an Express.js request object using a specified validator.\n * This function attempts to parse and validate the `body`, `query`, `params`, `headers`,\n * and `cookies` of the request using the `LinzEndpoint` validator. If any parsing\n * fails, it catches the error, populates the corresponding error, and throws a `ValidationError`\n * with detailed validation information.\n *\n * @param {Request} req - The Express.js request object that contains the incoming HTTP request data.\n * @param {LinzEndpoint} validator - An object used to validate different parts of the request, including\n *                                   body, query parameters, path parameters, headers, and cookies.\n *\n * @returns {Readonly<HTTPRequest>} An immutable HTTPRequest object containing validated and formatted\n *                                  `body`, `queries`, `params`, `headers`, and `cookies`.\n *                                  - `body`: The validated request body or `null` if not present.\n *                                  - `queries`: The validated query parameters as a key-value object.\n *                                  - `params`: The validated path parameters as a key-value object.\n *                                  - `headers`: The validated request headers as a key-value object.\n *                                  - `cookies`: The validated request cookies as a key-value object.\n *\n * @throws {ValidationError} Throws a `ValidationError` if any part of the request (body, queries, params, headers, or cookies)\n *                           fails validation. The error will contain detailed information about which parts failed and why.\n *\n * @example\n * const validator = {\n *   requestBody: z.object({ name: z.string() }),\n *   parameters: {\n *     query: z.object({ age: z.number() }),\n *     path: z.object({ id: z.string() }),\n *     header: z.object({ authorization: z.string() }),\n *     cookie: z.object({ sessionId: z.string() })\n *   }\n * };\n *\n * try {\n *   const formattedRequest = formatExpressReq(req, validator);\n *   console.log(formattedRequest.body);  // Parsed and validated body\n *   console.log(formattedRequest.queries);  // Parsed and validated query parameters\n * } catch (err) {\n *   if (err instanceof ValidationError) {\n *     console.error(err.errors);  // Detailed validation errors\n *   }\n * }\n */\nexport function formatExpressReq(req: Request, validator: LinzEndpoint): Readonly<HTTPRequest> {\n  const errors = {} as ConstructorParameters<typeof ValidationError>[0];\n\n  const body = tryCatch(\n    () => validator.requestBody?.parse(req.body) || req.body,\n    (err: any) => (errors[\"body\"] = JSON.parse(err.message))\n  );\n  const queries = tryCatch(\n    () => validator.parameters?.query?.parse(req.query) || req.query,\n    (err: any) => (errors[\"queries\"] = JSON.parse(err.message))\n  );\n  const params = tryCatch(\n    () => validator.parameters?.path?.parse(req.params) || req.params,\n    (err: any) => (errors[\"params\"] = JSON.parse(err.message))\n  );\n  const headers = tryCatch(\n    () => validator.parameters?.header?.parse(req.headers) || req.headers,\n    (err: any) => (errors[\"headers\"] = JSON.parse(err.message))\n  );\n  const cookies = tryCatch(\n    () => validator.parameters?.cookie?.parse(req.cookies) || req.cookies,\n    (err: any) => (errors[\"cookies\"] = JSON.parse(err.message))\n  );\n\n  if (!isEmpty(errors)) {\n    throw new ValidationError(errors);\n  }\n\n  return {\n    body: body ?? null,\n    queries: (queries as Record<string, string>) ?? {},\n    params: (params as Record<string, string>) ?? {},\n    headers: (headers as Record<string, string>) ?? {},\n    cookies: (cookies as Record<string, string>) ?? {}\n  };\n}\n\ntype PreparedResponse = {\n  contentType: string;\n  body: string | Buffer;\n};\n\n/**\n * Prepares an HTTP response body by determining its content type and formatting the body accordingly.\n * Returns an object containing the appropriate `contentType` and `body` based on the type of the input.\n *\n * @template T\n * @param {T} body - The response body, which can be of various types such as:\n *   - `string`: A plain text response\n *   - `number`: A numeric response\n *   - `boolean`: A boolean response\n *   - `object` or `Array`: A JSON-compatible response\n *   - `Buffer`: A binary response\n *   - `URLSearchParams`: A form-encoded response\n *\n * @returns {PreparedResponse} An object containing two properties:\n *    - `contentType`: A string representing the MIME type of the response based on the body type.\n *    - `body`: The appropriately formatted response body as a string or `Buffer`.\n *\n * @example\n * // Example usage with a string body\n * const response = prepareResponse(\"Hello, World!\");\n * console.log(response.contentType); // \"text/plain\"\n * console.log(response.body); // \"Hello, World!\"\n *\n * @example\n * // Example usage with an object body\n * const response = prepareResponse({ key: \"value\" });\n * console.log(response.contentType); // \"application/json\"\n * console.log(response.body); // '{\"key\":\"value\"}'\n *\n * @example\n * // Example usage with a Buffer\n * const response = prepareResponse(Buffer.from([1, 2, 3]));\n * console.log(response.contentType); // \"application/octet-stream\"\n * console.log(response.body); // <Buffer 01 02 03>\n *\n * @example\n * // Example usage with URLSearchParams\n * const params = new URLSearchParams();\n * params.append(\"key\", \"value\");\n * const response = prepareResponse(params);\n * console.log(response.contentType); // \"application/x-www-form-urlencoded\"\n * console.log(response.body); // \"key=value\"\n */\nexport function prepareResponse<T>(body: T): PreparedResponse {\n  if (typeof body === \"string\" || typeof body === \"number\" || typeof body === \"boolean\") {\n    return {\n      contentType: \"text/plain\",\n      body: String(body)\n    };\n  }\n  if (Array.isArray(body) || typeof body === \"object\") {\n    return {\n      contentType: \"application/json\",\n      body: JSON.stringify(body)\n    };\n  }\n  if (Buffer.isBuffer(body)) {\n    return {\n      contentType: \"application/octet-stream\",\n      body\n    };\n  }\n  if (body instanceof URLSearchParams) {\n    return {\n      contentType: \"application/x-www-form-urlencoded\",\n      body: Array.from(body)\n        .map((item) => item.map(encodeURIComponent).join(\"=\"))\n        .join(\"&\")\n    };\n  }\n\n  return {\n    contentType: \"text/plain\",\n    body: String(body)\n  };\n}\n\n/**\n * Converts a path with parameterized segments (e.g., `/users/:userId/posts/:postId`)\n * into a new format where parameter names are wrapped in curly braces,\n * and returns an object with the modified path and the list of parameter names.\n *\n * @param {string} path - The URL path string that contains parameterized segments prefixed with `:`.\n *                        Example: `/users/:userId/posts/:postId`\n *\n * @returns {{ path: string, params: string[] }} An object with two properties:\n *    - `path`: A new path string where the parameterized segments are converted to `{paramName}` format.\n *              Example: `/users/{userId}/posts/{postId}`\n *    - `params`: An array of strings representing the names of the parameters extracted from the original path.\n *                Example: `['userId', 'postId']`\n *\n * @example\n * // Example usage:\n * const result = convertPathParams('/users/:userId/posts/:postId');\n * console.log(result.path);  // '/users/{userId}/posts/{postId}'\n * console.log(result.params); // ['userId', 'postId']\n */\nexport function convertPathParams(path: string): { path: string, params: string[] } {\n  const paramRegex = /:([^/]+)/g;\n\n  const newPath = cleanPath(path).replace(paramRegex, \"{$1}\");\n\n  const paramNames = [];\n  let match: RegExpExecArray | null = null;\n  while ((match = paramRegex.exec(path)) !== null) {\n    paramNames.push(match[1]);\n  }\n\n  return {\n    path: newPath,\n    params: compact(paramNames)\n  };\n}\n\n/**\n * Cleans a URL or file path by replacing consecutive slashes (`/`) with a single slash.\n * This ensures that the path is formatted consistently with only one slash between segments.\n */\nfunction cleanPath(path: string): string {\n  return path.replace(/\\/+/gi, \"/\");\n}\n\n/**\n * A utility function that wraps a function in a try-catch block. If the function succeeds,\n * it returns the result. If an error occurs, it catches the error, passes it to a custom error handler,\n * and returns `null`.\n */\nfunction tryCatch<T>(fn: () => T, handler: (err: unknown) => void): T | null {\n  try {\n    return fn();\n  } catch (err: unknown) {\n    handler(err);\n    return null;\n  }\n}\n","import { generateSchema } from \"@anatine/zod-openapi\";\nimport { isEmpty, keyBy, mapValues, upperFirst } from \"lodash\";\nimport { OpenAPIV3 } from \"openapi-types\";\nimport { z } from \"zod\";\n\nimport { convertPathParams } from \"./utils\";\n\nimport { LinzEndpointGroup, Security } from \".\";\n\nconst API_ERROR_COMPONENT_NAME = \"ApiError\";\n\nconst GENERAL_ERROR_SCHEMA = z.object({\n  statusCode: z.number().int().min(100).max(599),\n  message: z.union([ z.object({}), z.any().array(), z.string() ])\n});\n\nconst VALIDATION_ERROR_SCHEMA = z.object({\n  statusCode: z.number().int().min(100).max(599),\n  message: z.union([ z.object({}), z.any().array(), z.string() ])\n});\n\nexport type BuilderConfig = {\n  openapi: \"3.0.3\";\n  info: OpenAPIV3.Document[\"info\"];\n  servers?: OpenAPIV3.Document[\"servers\"];\n  tags?: Record<string, OpenAPIV3.TagObject>;\n  paths: LinzEndpointGroup;\n  security?: Security<any>[];\n};\n\nexport function buildJson(config: BuilderConfig): OpenAPIV3.Document {\n  const transformedPath = {} as OpenAPIV3.Document[\"paths\"];\n\n  const schemaComponent = {} as NonNullable<OpenAPIV3.ComponentsObject[\"schemas\"]>;\n\n  for (const [ methodPath, operationObject ] of Object.entries(config.paths)) {\n    const [ method, ...pathParts ] = methodPath.split(/:/);\n    const { path, params: pathParams } = convertPathParams(pathParts.join(\":\"));\n\n    const parameterObject = [] as OpenAPIV3.ParameterObject[];\n    const pathObject = transformedPath[path] ?? {};\n\n    // collect parameters\n    if (operationObject.parameters) {\n      for (const [ type, schema ] of Object.entries(operationObject.parameters)) {\n        const { properties = {}, required = [] } = generateSchema(schema) as OpenAPIV3.SchemaObject;\n\n        for (const [ name, itemSchema ] of Object.entries(properties)) {\n          const { description, ...schema } = itemSchema as OpenAPIV3.SchemaObject;\n\n          parameterObject.push({\n            name,\n            in: type,\n            description,\n            required: required.includes(name) || undefined,\n            schema\n          });\n        }\n      }\n    }\n\n    // collect body objects\n    const requestBodySchemaName = `${upperFirst(operationObject.operationId)}RequestBody`;\n    if (operationObject.requestBody) {\n      const schema = generateSchema(operationObject.requestBody) as OpenAPIV3.SchemaObject;\n\n      schemaComponent[requestBodySchemaName]\n        = operationObject.requestBodyType === \"multipart/form-data\"\n          ? intoFormDataBody(schema)\n          : schema;\n    }\n\n    // collect response objects\n    const responseSchemaName = `${upperFirst(operationObject.operationId)}Response`;\n    if (operationObject.responses) {\n      for (const [ status, schema ] of Object.entries(operationObject.responses)) {\n        if (typeof schema === \"object\") {\n          schemaComponent[responseSchemaName] = generateSchema(schema) as OpenAPIV3.SchemaObject;\n        }\n      }\n    }\n\n    // wrap up\n    pathObject[method as OpenAPIV3.HttpMethods] = {\n      tags: operationObject.tags?.length\n        ? Object.values(operationObject.tags).map((v) => v.name)\n        : undefined,\n      summary: operationObject.summary || operationObject.operationId,\n      description: operationObject.description,\n      operationId: operationObject.operationId,\n      deprecated: operationObject.deprecated,\n      parameters: isEmpty(parameterObject) ? undefined : parameterObject,\n      security: operationObject.security?.map((sec) => ({\n        [sec.inner.name]: []\n      })),\n      requestBody: operationObject.requestBody\n        ? {\n          description: \"[DUMMY]\",\n          content: intoContentTypeRef(\n            operationObject.requestBodyType || \"application/json\",\n            requestBodySchemaName\n          )\n        }\n        : undefined,\n      responses: {\n        ...mapValues(operationObject.responses, (v) => {\n          return {\n            description: \"[DUMMY]\",\n            content:\n              typeof v === \"boolean\"\n                ? intoContentTypeRef(\"application/json\", API_ERROR_COMPONENT_NAME)\n                : intoContentTypeRef(\"application/json\", responseSchemaName)\n          };\n        }),\n        \"400\":\n          operationObject.requestBody || !isEmpty(operationObject.parameters)\n            ? {\n              description: \"Misformed data in a sending request\",\n              content: intoContentTypeRef(\"application/json\", API_ERROR_COMPONENT_NAME)\n            }\n            : undefined!,\n        \"401\": operationObject.security?.length\n          ? {\n            description: \"Unauthorized\",\n            content: intoContentTypeRef(\"application/json\", API_ERROR_COMPONENT_NAME)\n          }\n          : undefined!,\n        \"500\": {\n          description: \"Server unhandled or runtime error that may occur\",\n          content: intoContentTypeRef(\"application/json\", API_ERROR_COMPONENT_NAME)\n        }\n      }\n    };\n\n    transformedPath[path] = pathObject;\n  }\n\n  return {\n    openapi: config.openapi,\n    info: config.info,\n    paths: transformedPath,\n    components: {\n      schemas: {\n        ...schemaComponent,\n        [API_ERROR_COMPONENT_NAME]: generateSchema(GENERAL_ERROR_SCHEMA) as OpenAPIV3.SchemaObject\n      },\n      securitySchemes: config.security?.length\n        ? mapValues(\n          keyBy(\n            config.security.map((x) => x.inner),\n            \"name\"\n          ),\n          ({ handler, name, ...o }) => o as OpenAPIV3.SecuritySchemeObject\n        )\n        : undefined\n    },\n    tags: config.tags && !isEmpty(config.tags) ? Object.values(config.tags) : undefined\n  };\n}\n\nfunction intoContentTypeRef(\n  contentType: string,\n  schemaComponentName: string\n): Pick<OpenAPIV3.ResponseObject, \"content\"> {\n  return {\n    [contentType]: {\n      schema: {\n        $ref: `#/components/schemas/${schemaComponentName}`\n      }\n    }\n  };\n}\n\nfunction intoFormDataBody(schema: OpenAPIV3.SchemaObject): OpenAPIV3.SchemaObject {\n  return {\n    type: schema.type,\n    properties: mapValues(schema.properties, (v: any) =>\n      v.nullable ? { type: \"string\", format: \"binary\" } : v\n    )\n  } as OpenAPIV3.SchemaObject;\n}\n"],"mappings":"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","names":["src_exports","__export","ApiError","HttpResponse","METHODS","Security","ValidationError","applyGroupConfig","buildJson","convertPathParams","endpoint","formatExpressReq","initExpress","mergeEndpointGroups","prepareResponse","__toCommonJS","fs","import_stream","import_body_parser","import_cors","import_formidable","import_lodash","import_lodash","mergeEndpointGroups","prefix","groups","readKeys","group","keys","key","cleanPath","dupKeys","v","k","applyGroupConfig","config","formatExpressReq","req","validator","errors","body","tryCatch","err","queries","params","headers","cookies","ValidationError","prepareResponse","item","convertPathParams","path","paramRegex","newPath","paramNames","match","fn","handler","initExpress","app","endpoints","config","cors","bodeParser","registeredOpId","methodPath","operatorObject","method","pathParts","path","METHODS","m","req","res","extensions","form","formidable","fields","files","mergedItems","key","values","formattedValues","v","buffer","data","file","err","handleError","ValidationError","validatedReq","formatExpressReq","secOp","result","validate","HttpResponse","k","preparedResult","prepareResponse","registerDocsEndpoints","registerNotFoundHandler","ApiError","docPath","specFilePath","import_zod_openapi","import_lodash","import_zod","API_ERROR_COMPONENT_NAME","GENERAL_ERROR_SCHEMA","VALIDATION_ERROR_SCHEMA","buildJson","config","transformedPath","schemaComponent","methodPath","operationObject","method","pathParts","path","pathParams","convertPathParams","parameterObject","pathObject","type","schema","properties","required","name","itemSchema","description","requestBodySchemaName","intoFormDataBody","responseSchemaName","status","v","sec","intoContentTypeRef","x","handler","contentType","schemaComponentName","METHODS","endpoint","HttpResponse","payload","Security","config","flow","scopes","ApiError","status","msg","ValidationError"]}