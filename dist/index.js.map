{"version":3,"sources":["../src/index.ts","../src/adapter/engine-express.ts","../src/middlewares.ts","../src/internal-utils.ts","../src/json-builder.ts","../src/utils.ts"],"sourcesContent":["export * from \"./adapter/engine-express\";\nexport * from \"./json-builder\";\nexport * from \"./utils\";\n\nimport type { OpenAPIV3 } from \"openapi-types\";\nimport z, { type ZodObject, type ZodType } from \"zod\";\n\ntype ZodParameterTypes =\n  | z.ZodString\n  | z.ZodNumber\n  | z.ZodNaN\n  | z.ZodBigInt\n  | z.ZodBoolean\n  | z.ZodDate\n  | z.ZodUndefined\n  | z.ZodEnum<[string, ...string[]]>\n  | z.ZodOptional<ZodParameterTypes>\n  | z.ZodNullable<ZodParameterTypes>;\n\ntype Extensions = Record<string, any>;\ntype Tag = OpenAPIV3.TagObject;\n\nexport type LinzEndpoint = {\n  tags?: Tag[];\n  summary?: string;\n  description?: string;\n  operationId: string;\n  parameters?: {\n    query?: ZodObject<Record<string, ZodParameterTypes>>;\n    header?: ZodObject<Record<string, ZodParameterTypes>>;\n    path?: ZodObject<Record<string, ZodParameterTypes>>;\n    cookie?: ZodObject<Record<string, ZodParameterTypes>>;\n  };\n  requestBody?: z.ZodFirstPartySchemaTypes;\n  requestBodyType?: string;\n  responses: {\n    [status: number]: z.ZodFirstPartySchemaTypes | boolean;\n    default?: z.ZodFirstPartySchemaTypes;\n  };\n  deprecated?: boolean;\n  security?: Security<any>[];\n  handler: (\n    req: Readonly<HTTPRequest>,\n    extensions: Extensions\n  ) => Promise<HttpResponse<any> | HttpResponse<any>[\"payload\"][\"body\"]>;\n};\n\ntype MergeNonBooleanValues<T> = {\n  [K in keyof T]: T[K] extends ZodType ? z.infer<T[K]> : never\n}[keyof T];\ntype MergedResponse<T extends LinzEndpoint[\"responses\"]> = MergeNonBooleanValues<T> extends infer R ? R : never;\n\nexport const METHODS = [ \"get\", \"post\", \"put\", \"patch\", \"delete\" ] as const;\n\nexport type HttpMethod = (typeof METHODS)[number];\n\nexport type LinzEndpointGroup = {\n  [methodPath: `${(typeof METHODS)[number]}:${string}`]: LinzEndpoint;\n};\n\nexport type HTTPRequest = {\n  body: any | null;\n  queries: Record<string, string>;\n  params: Record<string, string>;\n  headers: Record<string, string>;\n  cookies: Record<string, string>;\n};\n\nexport function endpoint<\n  TExt extends Extensions,\n  TQuery extends ZodObject<Record<string, ZodParameterTypes>>,\n  THeader extends ZodObject<Record<string, ZodParameterTypes>>,\n  TPath extends ZodObject<Record<string, ZodParameterTypes>>,\n  TCookie extends ZodObject<Record<string, ZodParameterTypes>>,\n  TBody extends z.ZodFirstPartySchemaTypes,\n  TResponse extends {\n    [status: number]: z.ZodFirstPartySchemaTypes | boolean;\n    default?: z.ZodFirstPartySchemaTypes;\n  }\n>(endpoint: {\n  tags?: Tag[];\n  summary?: string;\n  description?: string;\n  operationId: string;\n  parameters?: {\n    query?: TQuery;\n    header?: THeader;\n    path?: TPath;\n    cookie?: TCookie\n  };\n  requestBody?: TBody;\n  requestBodyType?: string;\n  responses: TResponse;\n  deprecated?: boolean;\n  security?: Security<any>[];\n  handler: (\n    req: Readonly<{\n      queries: z.infer<TQuery>\n      headers: z.infer<THeader>\n      params: z.infer<TPath>\n      cookies: z.infer<TCookie>\n      body: z.infer<TBody>;\n    }>,\n    extensions: TExt\n  ) => Promise<MergedResponse<TResponse> | HttpResponse<MergedResponse<TResponse>>>;\n}): LinzEndpoint {\n  return endpoint as any;\n}\n\nexport class HttpResponse<T> {\n  constructor(public readonly payload: {\n    readonly headers?: Record<string, string>;\n    readonly status?: number;\n    readonly body?: T | ReadableStream;\n  }) {}\n}\n\ntype SecurityConfig = OpenAPIV3.SecuritySchemeObject & {\n  name: string;\n  handler: (req: Readonly<HTTPRequest>, extensions: Extensions) => Promise<void>;\n};\n\nexport class Security<T> {\n  public readonly inner: SecurityConfig;\n\n  constructor(config: SecurityConfig) {\n    this.inner = config;\n  }\n\n  use(flow: string, scopes: string[]): this {\n    return this;\n  }\n}\n\nexport class ApiError extends Error {\n  constructor(\n    public readonly status: number,\n    public readonly msg: string\n  ) {\n    super(msg);\n  }\n}\n\nexport class ValidationError extends Error {\n  constructor(public readonly msg: Record<string, any>) {\n    super(JSON.stringify(msg));\n  }\n}\n","import * as fs from \"fs\";\nimport { Readable } from \"stream\";\n\nimport cors, { type CorsOptions } from \"cors\";\nimport type { Express, Response } from \"express\";\nimport { expressBodyParser } from \"middlewares\";\n\nimport {\n  ApiError,\n  HttpMethod,\n  HttpResponse,\n  LinzEndpoint,\n  LinzEndpointGroup,\n  METHODS,\n  ValidationError\n} from \"../\";\nimport { formatExpressReq, prepareResponse, responseExpressError } from \"../internal-utils\";\n\ntype InitExpressConfig = {\n  cors: boolean | CorsOptions;\n  docs: {\n    vendor: \"scalar\";\n    path: string;\n    specUrl: string;\n  };\n};\n\nexport function initExpress(\n  app: Express,\n  endpoints: LinzEndpointGroup,\n  config?: Partial<InitExpressConfig>\n) {\n  if (config?.cors) {\n    app.use(cors(typeof config.cors === \"boolean\" ? {} : config.cors));\n  }\n\n  app.use(expressBodyParser);\n\n  console.log(`[server]: Registering ${Object.keys(endpoints).length} endpoints...`);\n\n  const registeredOpId = new Set<string>();\n  for (const [ methodPath, operatorObject ] of Object.entries(endpoints)) {\n    const [ method = \"\", ...pathParts ] = methodPath.split(\":\");\n    const path = pathParts.join(\":\");\n\n    if (registeredOpId.has(operatorObject.operationId)) {\n      throw new Error(`Duplicate operation ID \"${operatorObject.operationId}\" for path ${path}`);\n    } else {\n      registeredOpId.add(operatorObject.operationId);\n    }\n\n    if (!METHODS.some((m) => m === method)) {\n      throw new Error(`Invalid method \"${method}\" for path ${path}`);\n    }\n\n    console.log(`[register]: ${operatorObject.operationId} -> ${method.toUpperCase()} ${path}`);\n\n    app[method as HttpMethod](path, async (req, res) => {\n      const extensions = {};\n\n      try {\n        // validate\n        const validatedReq = formatExpressReq(req, operatorObject);\n\n        // process auth (if has) sequentially\n        if (operatorObject.security?.length) {\n          for (const secOp of operatorObject.security) {\n            await secOp.inner.handler(validatedReq, extensions);\n          }\n        }\n\n        // process main handler\n        const result = await operatorObject.handler(validatedReq, extensions);\n\n        // validate result\n        const usedStatus = method === \"post\" ? 201 : 200;\n        const validate: LinzEndpoint[\"responses\"][number] | undefined = result instanceof HttpResponse\n          ? (\n            result.payload.status\n              ? operatorObject.responses[result.payload.status] || operatorObject.responses[\"default\"]\n              : operatorObject.responses[usedStatus] || operatorObject.responses[\"default\"]\n          ) : (\n            operatorObject.responses[usedStatus]\n              || operatorObject.responses[\"default\"]\n          );\n\n        if (!validate || typeof validate === \"boolean\") {\n          const status = result instanceof HttpResponse ? result.payload.status : usedStatus;\n\n          console.error(\n            `[error]: There is no corresponding validator defined in schema for status ${status ?? \"default\"}`\n          );\n          throw new Error(\"Internal server error\");\n        }\n\n        try {\n          validate.parse(result instanceof HttpResponse ? result.payload.body : result);\n        } catch (err: unknown) {\n          console.error(\n            \"[error]: Invalid output format to the corresponding defined output schema\"\n          );\n          console.error(String(err));\n          throw new Error(\"Internal server error\");\n        }\n\n        // prepare response\n        const headers = result instanceof HttpResponse ? result.payload.headers : undefined;\n        const status = result instanceof HttpResponse ? result.payload.status : undefined;\n        const body = result instanceof HttpResponse ? result.payload.body : result;\n\n        if (result instanceof HttpResponse && result.payload.body instanceof Readable) {\n          res.header(result.payload.headers);\n\n          return result.payload.body.pipe(res);\n        } else {\n          const preparedResult = prepareResponse(body);\n          const preparedStatus = status ?? usedStatus;\n\n          if (preparedResult) {\n            return res\n              .contentType(preparedResult.contentType)\n              .status(preparedStatus)\n              .header(headers)\n              .send(preparedResult.body);\n          } else {\n            return res\n              .header(headers)\n              .end();\n          }\n        }\n      } catch (err: unknown) {\n        return handleError(err, res);\n      }\n    });\n  }\n\n  // docs config\n  if (config?.docs) {\n    registerDocsEndpoints(app, config.docs.path, config.docs.specUrl);\n  }\n\n  // fallback\n  registerNotFoundHandler(app);\n}\n\nfunction handleError(err: unknown, res: Response) {\n  if (err instanceof ApiError) {\n    res.status(err.status).send({\n      statusCode: err.status,\n      message: err.message\n    });\n  } else if (err instanceof ValidationError) {\n    res.status(400).send({\n      statusCode: 400,\n      message: Object.entries(JSON.parse(err.message)).map(([ k, v ]) => ({\n        in: k,\n        result: v\n      }))\n    });\n  } else if (err instanceof Error) {\n    console.error(String(err));\n    res.status(500).send({\n      statusCode: 500,\n      message: err.message\n    });\n  } else {\n    console.error(String(err));\n    res.status(500).send({\n      statusCode: 500,\n      message: String(err)\n    });\n  }\n}\n\nfunction registerDocsEndpoints(app: Express, docPath: string, specFilePath: string) {\n  app.get(docPath, (req, res) => {\n    res\n      .contentType(\"html\")\n      .send(fs.readFileSync(\"dist/index.html\"));\n  });\n  app.get(\"/openapi.json\", (req, res) => {\n    res\n      .contentType(\"json\")\n      .send(fs.readFileSync(specFilePath));\n  });\n}\n\nfunction registerNotFoundHandler(app: Express) {\n  app.all(\"*\", (req, res) => {\n    responseExpressError(res, 404, `Cannot find ${req.method.toUpperCase()} ${req.path}`);\n  });\n}\n","import * as fs from \"fs\";\n\nimport { NextFunction, Request, Response } from \"express\";\nimport formidable from \"formidable\";\nimport { responseExpressError } from \"internal-utils\";\nimport { mapValues } from \"lodash\";\n\nconst HEADER_CONTENT_TYPE = \"content-type\";\n\nexport function expressBodyParser(req: Request, res: Response, next: NextFunction): void {\n  const bufferChunks: Buffer[] = [];\n\n  req.on(\"data\", (chunk: Buffer) => bufferChunks.push(chunk));\n\n  req.on(\"end\", async () => {\n    if (req.method === \"GET\") {\n      return next();\n    } else if (req.headers[HEADER_CONTENT_TYPE] === \"application/json\") {\n      const rawBody = Buffer.concat(bufferChunks);\n\n      try {\n        if (rawBody.length) {\n          req.body = JSON.parse(rawBody.toString(\"utf-8\"));\n        }\n      } catch (err) {\n        return responseExpressError(res, 400, \"Invalid JSON\");\n      }\n\n      return next();\n    } else if (req.headers[HEADER_CONTENT_TYPE]?.startsWith(\"multipart/form-data\")) {\n      const form = formidable({});\n      const [ fields, files ] = await form.parse(req);\n\n      // collect data\n      const mergedItems = {} as Record<string, (string | File)[]>;\n      for (const [ key, values = [] ] of Object.entries(fields)) {\n        mergedItems[key] ??= [];\n        mergedItems[key]?.push(...values);\n      }\n      for (const [ key, values = [] ] of Object.entries(files)) {\n        mergedItems[key] ??= [];\n\n        const formattedValues = values.map((v) => {\n          const buffer = fs.readFileSync(v.filepath);\n          const data = new Uint8Array(buffer);\n          const file = new File([ data ], v.originalFilename || v.newFilename, {\n            type: v.mimetype || \"\"\n          });\n          fs.rmSync(v.filepath);\n\n          return file;\n        });\n\n        mergedItems[key]?.push(...formattedValues);\n      }\n\n      // validate\n      const err = [];\n      for (const [ key, values = [] ] of Object.entries(mergedItems)) {\n        if (values.length > 1) {\n          err.push({\n            field: key,\n            message: \"Duplicated key\"\n          });\n        }\n      }\n\n      if (err.length) {\n        return responseExpressError(\n          res,\n          400,\n          JSON.stringify({\n            in: \"body\",\n            result: err.map(({ field, message }) => ({\n              path: [ field ],\n              message\n            }))\n          })\n        );\n      }\n\n      req.body = mapValues(mergedItems, (v) => v[0]);\n\n      return next();\n    } else if (req.headers[HEADER_CONTENT_TYPE] === \"application/x-www-form-urlencoded\") {\n      const data = Buffer.concat(bufferChunks).toString(\"utf-8\");\n      const dataUrl = new URLSearchParams(data);\n\n      const duplicatedKeys: string[] = [];\n      Array.from(dataUrl.keys()).reduce((acc, x) => {\n        acc.has(x) ? duplicatedKeys.push(x) : acc.add(x);\n        return acc;\n      }, new Set<string>());\n\n      if (duplicatedKeys.length) {\n        return responseExpressError(\n          res,\n          400,\n          JSON.stringify({\n            in: \"body\",\n            result: duplicatedKeys.map((fieldName) => ({\n              path: [ fieldName ],\n              message: \"Duplicated key\"\n            }))\n          })\n        );\n      }\n\n      req.body = Object.fromEntries(dataUrl);\n\n      return next();\n    } else if (req.headers[HEADER_CONTENT_TYPE] === \"application/octet-stream\") {\n      req.body = Buffer.concat(bufferChunks);\n\n      return next();\n    } else {\n      return responseExpressError(res, 415, `'${req.headers[HEADER_CONTENT_TYPE]}' content type is not supported`);\n    }\n  });\n\n  req.on(\"error\", (err) => {\n    responseExpressError(res, 500, String(err));\n  });\n}\n","import { Request, Response } from \"express\";\n\nimport { HTTPRequest, LinzEndpoint, ValidationError } from \".\";\n\nexport function formatExpressReq(req: Request, validator: LinzEndpoint): Readonly<HTTPRequest> {\n  const errors = {} as ConstructorParameters<typeof ValidationError>[0];\n\n  const body = tryCatch(\n    () => validator.requestBody?.parse(req.body) || req.body,\n    (err: any) => (errors[\"body\"] = JSON.parse(err.message))\n  );\n  const queries = tryCatch(\n    () => validator.parameters?.query?.parse(req.query) || req.query,\n    (err: any) => (errors[\"queries\"] = JSON.parse(err.message))\n  );\n  const params = tryCatch(\n    () => validator.parameters?.path?.parse(req.params) || req.params,\n    (err: any) => (errors[\"params\"] = JSON.parse(err.message))\n  );\n  const headers = tryCatch(\n    () => validator.parameters?.header?.parse(req.headers) || req.headers,\n    (err: any) => (errors[\"headers\"] = JSON.parse(err.message))\n  );\n  const cookies = tryCatch(\n    () => validator.parameters?.cookie?.parse(req.cookies) || req.cookies,\n    (err: any) => (errors[\"cookies\"] = JSON.parse(err.message))\n  );\n\n  if (Object.keys(errors).length) {\n    throw new ValidationError(errors);\n  }\n\n  return {\n    body: body ?? null,\n    queries: (queries as Record<string, string>) ?? {},\n    params: (params as Record<string, string>) ?? {},\n    headers: (headers as Record<string, string>) ?? {},\n    cookies: (cookies as Record<string, string>) ?? {}\n  };\n}\n\nexport function responseExpressError(res: Response, statusCode: number, message: string, loggerScope?: string): void {\n  if (typeof loggerScope === \"string\") {\n    if (loggerScope) {\n      console.error(`[error:${loggerScope}]: ${message}`);\n    } else {\n      console.error(`[error]: ${message}`);\n    }\n  }\n\n  res\n    .status(statusCode)\n    .contentType(\"application/json\")\n    .send({ statusCode, message });\n}\n\ntype PreparedResponse = {\n  contentType: string;\n  body: string | Buffer;\n};\n\nexport function prepareResponse<T>(body: T): PreparedResponse | null {\n  if (typeof body === \"undefined\") {\n    return null;\n  }\n  if (typeof body === \"string\" || typeof body === \"number\" || typeof body === \"boolean\") {\n    return {\n      contentType: \"text/plain\",\n      body: String(body)\n    };\n  }\n  if (Array.isArray(body) || typeof body === \"object\" || body === null) {\n    return {\n      contentType: \"application/json\",\n      body: JSON.stringify(body)\n    };\n  }\n  if (Buffer.isBuffer(body)) {\n    return {\n      contentType: \"application/octet-stream\",\n      body\n    };\n  }\n  if (body instanceof URLSearchParams) {\n    return {\n      contentType: \"application/x-www-form-urlencoded\",\n      body: Array.from(body)\n        .map((item) => item.map(encodeURIComponent).join(\"=\"))\n        .join(\"&\")\n    };\n  }\n\n  return {\n    contentType: \"text/plain\",\n    body: String(body)\n  };\n}\n\nexport function convertPathParams(path: string): { path: string, params: string[] } {\n  const paramRegex = /:([^/]+)/g;\n\n  const newPath = cleanPath(path).replace(paramRegex, \"{$1}\");\n\n  const paramNames: string[] = [];\n  let match: RegExpExecArray | null = null;\n  while ((match = paramRegex.exec(path)) !== null) {\n    paramNames.push(match[1]!);\n  }\n\n  return {\n    path: newPath,\n    params: paramNames\n  };\n}\n\nexport function cleanPath(path: string): string {\n  return path.replace(/\\/+/gi, \"/\");\n}\n\nfunction tryCatch<T>(fn: () => T, handler: (err: unknown) => void): T | null {\n  try {\n    return fn();\n  } catch (err: unknown) {\n    handler(err);\n    return null;\n  }\n}\n","import { generateSchema } from \"@anatine/zod-openapi\";\nimport { isEmpty, keyBy, mapValues, upperFirst } from \"lodash\";\nimport { OpenAPIV3 } from \"openapi-types\";\nimport { z } from \"zod\";\n\nimport { convertPathParams } from \"./internal-utils\";\n\nimport { LinzEndpointGroup, Security } from \".\";\nimport httpStatus from \"http-status\";\n\nconst GENERAL_API_ERROR_COMPONENT_NAME = \"GeneralApiError\";\nconst VALIDATION_ERROR_COMPONENT_NAME = \"ValidationError\";\n\nconst ZOD_ERROR_ITEM = z.object({\n  code: z.string(),\n  expected: z.string(),\n  received: z.string(),\n  path: z.string().array(),\n  message: z.string()\n});\n\nconst ZOD_ERROR_SCHEMA = z.object({\n  in: z.enum([ \"body\", \"queries\", \"params\", \"headers\", \"cookies\" ])\n    .describe(\"The part of a request where data validation failed\"),\n  result: z.array(ZOD_ERROR_ITEM)\n    .describe(\"An array of error items\")\n});\n\nconst GENERAL_ERROR_SCHEMA = z.object({\n  statusCode: z.number().int().min(100).max(599)\n    .describe(\"The HTTP response status code\"),\n  message: z.string()\n    .describe(\"The message associated with the error\")\n})\n  .describe(\"A general HTTP error response\");\n\nconst VALIDATION_ERROR_SCHEMA = GENERAL_ERROR_SCHEMA.extend({\n  message: z.union([\n    z.array(ZOD_ERROR_SCHEMA)\n      .describe(\"An array of error schemas detailing validation issues\"),\n    z.string()\n      .describe(\"Alternatively, a simple error message\")\n  ])\n})\n  .describe(\"An error related to the validation process with more detailed information\");\n\nexport type BuilderConfig = {\n  openapi: \"3.0.3\";\n  info: OpenAPIV3.Document[\"info\"];\n  servers?: OpenAPIV3.Document[\"servers\"];\n  tags?: Record<string, OpenAPIV3.TagObject>;\n  paths: LinzEndpointGroup;\n  security?: Security<any>[];\n};\n\nexport function buildJson(config: BuilderConfig): OpenAPIV3.Document {\n  const transformedPath = {} as OpenAPIV3.Document[\"paths\"];\n\n  const schemaComponent = {} as NonNullable<OpenAPIV3.ComponentsObject[\"schemas\"]>;\n\n  for (const [ methodPath, operationObject ] of Object.entries(config.paths)) {\n    const [ method, ...pathParts ] = methodPath.split(/:/);\n    const { path, params: pathParams } = convertPathParams(pathParts.join(\":\"));\n\n    const parameterObject = [] as OpenAPIV3.ParameterObject[];\n    const pathObject = transformedPath[path] ?? {};\n\n    // collect parameters\n    if (operationObject.parameters) {\n      for (const [ type, schema ] of Object.entries(operationObject.parameters)) {\n        const { properties = {}, required = [] } = generateSchema(schema) as OpenAPIV3.SchemaObject;\n\n        for (const [ name, itemSchema ] of Object.entries(properties)) {\n          const { description, ...schema } = itemSchema as OpenAPIV3.SchemaObject;\n\n          parameterObject.push({\n            name,\n            in: type,\n            description,\n            required: required.includes(name) || undefined,\n            schema\n          });\n        }\n      }\n    }\n\n    // collect body objects\n    const requestBodySchemaName = `${upperFirst(operationObject.operationId)}RequestBody`;\n    if (operationObject.requestBody) {\n      const schema = generateSchema(operationObject.requestBody) as OpenAPIV3.SchemaObject;\n\n      schemaComponent[requestBodySchemaName]\n        = operationObject.requestBodyType === \"multipart/form-data\"\n          ? intoFormDataBody(schema)\n          : schema;\n    }\n\n    // collect response objects\n    const responseSchemaName = `${upperFirst(operationObject.operationId)}Response`;\n    if (operationObject.responses) {\n      for (const [ status, schema ] of Object.entries(operationObject.responses)) {\n        if (typeof schema === \"object\") {\n          schemaComponent[responseSchemaName] = generateSchema(schema) as OpenAPIV3.SchemaObject;\n        }\n      }\n    }\n\n    // wrap up\n    pathObject[method as OpenAPIV3.HttpMethods] = {\n      tags: operationObject.tags?.length\n        ? Object.values(operationObject.tags).map((v) => v.name)\n        : undefined,\n      summary: operationObject.summary || operationObject.operationId,\n      description: operationObject.description,\n      operationId: operationObject.operationId,\n      deprecated: operationObject.deprecated,\n      parameters: isEmpty(parameterObject) ? undefined : parameterObject,\n      security: operationObject.security?.map((sec) => ({\n        [sec.inner.name]: []\n      })),\n      requestBody: operationObject.requestBody\n        ? {\n          description: \"[DUMMY]\",\n          content: intoContentTypeRef(\n            operationObject.requestBodyType || \"application/json\",\n            requestBodySchemaName\n          )\n        }\n        : undefined,\n      responses: {\n        ...mapValues(operationObject.responses, (v, k) => {\n          return {\n            description: httpStatus[`${k}` as keyof typeof httpStatus].toString(),\n            content:\n              typeof v === \"boolean\"\n                ? intoContentTypeRef(\"application/json\", GENERAL_API_ERROR_COMPONENT_NAME)\n                : intoContentTypeRef(\"application/json\", responseSchemaName)\n          };\n        }),\n        \"400\":\n          operationObject.requestBody || !isEmpty(operationObject.parameters)\n            ? {\n              description: \"Misformed data in a sending request\",\n              content: intoContentTypeRef(\"application/json\", VALIDATION_ERROR_COMPONENT_NAME)\n            }\n            : undefined!,\n        \"401\": operationObject.security?.length\n          ? {\n            description: \"Unauthorized\",\n            content: intoContentTypeRef(\"application/json\", GENERAL_API_ERROR_COMPONENT_NAME)\n          }\n          : undefined!,\n        \"500\": {\n          description: \"Server unhandled or runtime error that may occur\",\n          content: intoContentTypeRef(\"application/json\", GENERAL_API_ERROR_COMPONENT_NAME)\n        }\n      }\n    };\n\n    transformedPath[path] = pathObject;\n  }\n\n  return {\n    openapi: config.openapi,\n    info: config.info,\n    paths: transformedPath,\n    components: {\n      schemas: {\n        ...schemaComponent,\n        [GENERAL_API_ERROR_COMPONENT_NAME]: generateSchema(GENERAL_ERROR_SCHEMA) as OpenAPIV3.SchemaObject,\n        [VALIDATION_ERROR_COMPONENT_NAME]: generateSchema(VALIDATION_ERROR_SCHEMA) as OpenAPIV3.SchemaObject\n      },\n      securitySchemes: config.security?.length\n        ? mapValues(\n          keyBy(\n            config.security.map((x) => x.inner),\n            \"name\"\n          ),\n          ({ handler, name, ...o }) => o as OpenAPIV3.SecuritySchemeObject\n        )\n        : undefined\n    },\n    tags: config.tags && !isEmpty(config.tags) ? Object.values(config.tags) : undefined\n  };\n}\n\nfunction intoContentTypeRef(\n  contentType: string,\n  schemaComponentName: string\n): Pick<OpenAPIV3.ResponseObject, \"content\"> {\n  return {\n    [contentType]: {\n      schema: {\n        $ref: `#/components/schemas/${schemaComponentName}`\n      }\n    }\n  };\n}\n\nfunction intoFormDataBody(schema: OpenAPIV3.SchemaObject): OpenAPIV3.SchemaObject {\n  return {\n    type: schema.type,\n    properties: mapValues(schema.properties, (v: any) =>\n      v.nullable ? { type: \"string\", format: \"binary\" } : v\n    )\n  } as OpenAPIV3.SchemaObject;\n}\n","import { cleanPath } from \"internal-utils\";\nimport { intersection, mapKeys, mapValues } from \"lodash\";\n\nimport { LinzEndpoint, LinzEndpointGroup } from \".\";\n\n/**\n * Merges multiple endpoint groups into a single group, applying a prefix to all keys.\n * This function ensures that no duplicate keys are present across the groups,\n * and throws an error if duplication occurs. It returns the merged group with the prefixed keys.\n *\n * @param {string} prefix - A string prefix to prepend to each endpoint key in the groups.\n * @param {LinzEndpointGroup[]} groups - An array of endpoint groups to be merged. Each group is a map of endpoint keys to configurations.\n *\n * @returns {LinzEndpointGroup} - A single merged endpoint group with prefixed keys. All keys are cleaned using `cleanPath`,\n *                                and any keys with collisions are reported as an error.\n *\n * @throws {Error} Throws an error if duplicate keys are found after applying the prefix to the groups.\n */\nexport function mergeEndpointGroups(\n  prefix: string,\n  groups: LinzEndpointGroup[]\n): LinzEndpointGroup {\n  const readKeys: string[] = [];\n  const dupKeys: string[] = [];\n\n  for (const group of groups) {\n    const keys = Object.keys(group).map((key) => cleanPath(`${prefix}${key}`));\n\n    dupKeys.push(...intersection(readKeys, keys));\n    readKeys.push(...keys);\n  }\n\n  if (dupKeys.length) {\n    throw new Error(`Duplicated keys occured: ${dupKeys.join(\", \")}`);\n  }\n\n  return mapKeys(Object.assign({}, ...groups), (v, k) => cleanPath(k.replace(/:/, `:${prefix}`)));\n}\n\n/**\n * Applies a common configuration to all endpoints within a given group of `LinzEndpoint`.\n * The function merges the provided configuration (`tags` and `security`) with each endpoint's\n * existing configuration.\n *\n * @param {LinzEndpointGroup} group - A group of endpoints, where each endpoint has its own configuration.\n * @param {Object} config - An object containing common configuration options to apply to each endpoint.\n * @param {LinzEndpoint[\"tags\"]} [config.tags] - Optional tags to apply to each endpoint in the group.\n * @param {LinzEndpoint[\"security\"]} [config.security] - Optional security configuration to apply to each endpoint in the group.\n *\n * @returns {LinzEndpointGroup} - A new group of endpoints with the merged configuration for each endpoint.\n */\nexport function applyGroupConfig(\n  group: LinzEndpointGroup,\n  config: {\n    tags?: LinzEndpoint[\"tags\"];\n    security?: LinzEndpoint[\"security\"];\n  }\n): LinzEndpointGroup {\n  return mapValues(group, (v) => ({ ...config, ...v }));\n}\n"],"mappings":"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","names":["src_exports","__export","ApiError","HttpResponse","METHODS","Security","ValidationError","applyGroupConfig","buildJson","endpoint","initExpress","mergeEndpointGroups","__toCommonJS","fs","import_stream","import_cors","fs","import_formidable","formatExpressReq","req","validator","errors","body","tryCatch","err","queries","params","headers","cookies","ValidationError","responseExpressError","res","statusCode","message","loggerScope","prepareResponse","item","convertPathParams","path","paramRegex","newPath","cleanPath","paramNames","match","fn","handler","import_lodash","HEADER_CONTENT_TYPE","expressBodyParser","req","res","next","bufferChunks","chunk","rawBody","responseExpressError","form","formidable","fields","files","mergedItems","key","values","formattedValues","v","buffer","data","file","err","field","message","dataUrl","duplicatedKeys","acc","x","fieldName","initExpress","app","endpoints","config","cors","expressBodyParser","registeredOpId","methodPath","operatorObject","method","pathParts","path","METHODS","m","req","res","extensions","validatedReq","formatExpressReq","secOp","result","usedStatus","validate","HttpResponse","status","err","headers","body","preparedResult","prepareResponse","preparedStatus","handleError","registerDocsEndpoints","registerNotFoundHandler","ApiError","ValidationError","k","v","docPath","specFilePath","responseExpressError","import_zod_openapi","import_lodash","import_zod","import_http_status","GENERAL_API_ERROR_COMPONENT_NAME","VALIDATION_ERROR_COMPONENT_NAME","ZOD_ERROR_ITEM","ZOD_ERROR_SCHEMA","GENERAL_ERROR_SCHEMA","VALIDATION_ERROR_SCHEMA","buildJson","config","transformedPath","schemaComponent","methodPath","operationObject","method","pathParts","path","pathParams","convertPathParams","parameterObject","pathObject","type","schema","properties","required","name","itemSchema","description","requestBodySchemaName","intoFormDataBody","responseSchemaName","status","v","sec","intoContentTypeRef","k","httpStatus","x","handler","o","contentType","schemaComponentName","import_lodash","mergeEndpointGroups","prefix","groups","readKeys","dupKeys","group","keys","key","cleanPath","v","k","applyGroupConfig","config","METHODS","endpoint","HttpResponse","payload","Security","config","flow","scopes","ApiError","status","msg","ValidationError"]}